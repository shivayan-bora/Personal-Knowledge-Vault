{"pageProps":{"note":{"id":"xt4wt9sz1ovae9zba0q0b7w","title":"Request Config","desc":"","updated":1654435523206,"created":1654435434210,"custom":{},"fname":"cs.webdev.frontend.language.js.tools.axios.methods.default.request-config","type":"note","vault":{"fsPath":"vault"},"contentHash":"376437779a6f7b8dfc0974398d06ed4a","links":[],"anchors":{},"children":[],"parent":"7v8pf5c7rj2hmt2ctcg1ugc","data":{}},"body":"<h1 id=\"request-config\">Request Config<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#request-config\"></a></h1>\n<p>These are the configuration options while making the default axios call. In this case, the <code>url</code> is necessary, however if no method is specified, the default method used would be GET.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// `url` is the server URL that will be used for the request</span>\n  url<span class=\"token operator\">:</span> '/user'<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `method` is the request method to be used when making the request</span>\n  method<span class=\"token operator\">:</span> 'get'<span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `baseURL` will be prepended to `url` unless `url` is absolute.</span>\n  <span class=\"token comment\">// It can be convenient to set `baseURL` for an instance of axios to pass relative URLs</span>\n  <span class=\"token comment\">// to methods of that instance.</span>\n  baseURL<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//some-domain.com/api',</span>\n\n  <span class=\"token comment\">// `transformRequest` allows changes to the request data before it is sent to the server</span>\n  <span class=\"token comment\">// This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'</span>\n  <span class=\"token comment\">// The last function in the array must return a string or an instance of Buffer, ArrayBuffer,</span>\n  <span class=\"token comment\">// FormData or Stream</span>\n  <span class=\"token comment\">// You may modify the headers object.</span>\n  transformRequest<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>function (data<span class=\"token punctuation\">,</span> headers) <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do whatever you want to transform the data</span>\n\n    return data;\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `transformResponse` allows changes to the response data to be made before</span>\n  <span class=\"token comment\">// it is passed to then/catch</span>\n  transformResponse<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>function (data) <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do whatever you want to transform the data</span>\n\n    return data;\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `headers` are custom headers to be sent</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>'X-Requested-With'<span class=\"token operator\">:</span> 'XMLHttpRequest'<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `params` are the URL parameters to be sent with the request</span>\n  <span class=\"token comment\">// Must be a plain object or a URLSearchParams object</span>\n  <span class=\"token comment\">// NOTE: params that are null or undefined are not rendered in the URL.</span>\n  params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ID<span class=\"token operator\">:</span> <span class=\"token number\">12345</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `paramsSerializer` is an optional function in charge of serializing `params`</span>\n  <span class=\"token comment\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span>\n  paramsSerializer<span class=\"token operator\">:</span> function (params) <span class=\"token punctuation\">{</span>\n    return Qs.stringify(params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>arrayFormat<span class=\"token operator\">:</span> 'brackets'<span class=\"token punctuation\">}</span>)\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `data` is the data to be sent as the request body</span>\n  <span class=\"token comment\">// Only applicable for request methods 'PUT', 'POST', 'DELETE', and 'PATCH'</span>\n  <span class=\"token comment\">// When no `transformRequest` is set, must be of one of the following types:</span>\n  <span class=\"token comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span>\n  <span class=\"token comment\">// - Browser only: FormData, File, Blob</span>\n  <span class=\"token comment\">// - Node only: Stream, Buffer</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token operator\">:</span> 'Fred'\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token comment\">// syntax alternative to send data into the body</span>\n  <span class=\"token comment\">// method post</span>\n  <span class=\"token comment\">// only the value is sent, not the key</span>\n  data<span class=\"token operator\">:</span> 'Country=Brasil&#x26;City=Belo Horizonte'<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `timeout` specifies the number of milliseconds before the request times out.</span>\n  <span class=\"token comment\">// If the request takes longer than `timeout`, the request will be aborted.</span>\n  timeout<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default is `0` (no timeout)</span>\n\n  <span class=\"token comment\">// `withCredentials` indicates whether or not cross-site Access-Control requests</span>\n  <span class=\"token comment\">// should be made using credentials</span>\n  withCredentials<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `adapter` allows custom handling of requests which makes testing easier.</span>\n  <span class=\"token comment\">// Return a promise and supply a valid response (see lib/adapters/README.md).</span>\n  adapter<span class=\"token operator\">:</span> function (config) <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `auth` indicates that HTTP Basic auth should be used, and supplies credentials.</span>\n  <span class=\"token comment\">// This will set an `Authorization` header, overwriting any existing</span>\n  <span class=\"token comment\">// `Authorization` custom headers you have set using `headers`.</span>\n  <span class=\"token comment\">// Please note that only HTTP Basic auth is configurable through this parameter.</span>\n  <span class=\"token comment\">// For Bearer tokens and such, use `Authorization` custom headers instead.</span>\n  auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> 'janedoe'<span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> 's00pers3cret'\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `responseType` indicates the type of data that the server will respond with</span>\n  <span class=\"token comment\">// options are: 'arraybuffer', 'document', 'json', 'text', 'stream'</span>\n  <span class=\"token comment\">//   browser only: 'blob'</span>\n  responseType<span class=\"token operator\">:</span> 'json'<span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `responseEncoding` indicates encoding to use for decoding responses (Node.js only)</span>\n  <span class=\"token comment\">// Note: Ignored for `responseType` of 'stream' or client-side requests</span>\n  responseEncoding<span class=\"token operator\">:</span> 'utf8'<span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `xsrfCookieName` is the name of the cookie to use as a value for xsrf token</span>\n  xsrfCookieName<span class=\"token operator\">:</span> 'XSRF-TOKEN'<span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span>\n  xsrfHeaderName<span class=\"token operator\">:</span> 'X-XSRF-TOKEN'<span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `onUploadProgress` allows handling of progress events for uploads</span>\n  <span class=\"token comment\">// browser only</span>\n  onUploadProgress<span class=\"token operator\">:</span> function (progressEvent) <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do whatever you want with the native progress event</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `onDownloadProgress` allows handling of progress events for downloads</span>\n  <span class=\"token comment\">// browser only</span>\n  onDownloadProgress<span class=\"token operator\">:</span> function (progressEvent) <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do whatever you want with the native progress event</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `maxContentLength` defines the max size of the http response content in bytes allowed in node.js</span>\n  maxContentLength<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed</span>\n  maxBodyLength<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `validateStatus` defines whether to resolve or reject the promise for a given</span>\n  <span class=\"token comment\">// HTTP response status code. If `validateStatus` returns `true` (or is set to `null`</span>\n  <span class=\"token comment\">// or `undefined`), the promise will be resolved; otherwise, the promise will be</span>\n  <span class=\"token comment\">// rejected.</span>\n  validateStatus<span class=\"token operator\">:</span> function (status) <span class=\"token punctuation\">{</span>\n    return status >= <span class=\"token number\">200</span> &#x26;&#x26; status &#x3C; <span class=\"token number\">300</span>; <span class=\"token comment\">// default</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `maxRedirects` defines the maximum number of redirects to follow in node.js.</span>\n  <span class=\"token comment\">// If set to 0, no redirects will be followed.</span>\n  maxRedirects<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `socketPath` defines a UNIX Socket to be used in node.js.</span>\n  <span class=\"token comment\">// e.g. '/var/run/docker.sock' to send requests to the docker daemon.</span>\n  <span class=\"token comment\">// Only either `socketPath` or `proxy` can be specified.</span>\n  <span class=\"token comment\">// If both are specified, `socketPath` is used.</span>\n  socketPath<span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span>\n  <span class=\"token comment\">// and https requests, respectively, in node.js. This allows options to be added like</span>\n  <span class=\"token comment\">// `keepAlive` that are not enabled by default.</span>\n  httpAgent<span class=\"token operator\">:</span> new http.Agent(<span class=\"token punctuation\">{</span> keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>)<span class=\"token punctuation\">,</span>\n  httpsAgent<span class=\"token operator\">:</span> new https.Agent(<span class=\"token punctuation\">{</span> keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>)<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `proxy` defines the hostname, port, and protocol of the proxy server.</span>\n  <span class=\"token comment\">// You can also define your proxy using the conventional `http_proxy` and</span>\n  <span class=\"token comment\">// `https_proxy` environment variables. If you are using environment variables</span>\n  <span class=\"token comment\">// for your proxy configuration, you can also define a `no_proxy` environment</span>\n  <span class=\"token comment\">// variable as a comma-separated list of domains that should not be proxied.</span>\n  <span class=\"token comment\">// Use `false` to disable proxies, ignoring environment variables.</span>\n  <span class=\"token comment\">// `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and</span>\n  <span class=\"token comment\">// supplies credentials.</span>\n  <span class=\"token comment\">// This will set an `Proxy-Authorization` header, overwriting any existing</span>\n  <span class=\"token comment\">// `Proxy-Authorization` custom headers you have set using `headers`.</span>\n  <span class=\"token comment\">// If the proxy server uses HTTPS, then you must set the protocol to `https`. </span>\n  proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    protocol<span class=\"token operator\">:</span> 'https'<span class=\"token punctuation\">,</span>\n    host<span class=\"token operator\">:</span> '<span class=\"token number\">127.0</span>.<span class=\"token number\">0.1</span>'<span class=\"token punctuation\">,</span>\n    port<span class=\"token operator\">:</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">,</span>\n    auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      username<span class=\"token operator\">:</span> 'mikeymike'<span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> 'rapunz3l'\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `cancelToken` specifies a cancel token that can be used to cancel the request</span>\n  <span class=\"token comment\">// (see Cancellation section below for details)</span>\n  cancelToken<span class=\"token operator\">:</span> new CancelToken(function (cancel) <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>)<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `decompress` indicates whether or not the response body should be decompressed </span>\n  <span class=\"token comment\">// automatically. If set to `true` will also remove the 'content-encoding' header </span>\n  <span class=\"token comment\">// from the responses objects of all decompressed responses</span>\n  <span class=\"token comment\">// - Node only (XHR cannot turn off decompression)</span>\n  decompress<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// default</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"2rzu5qtc4erc8gkfiteeysj","title":"Root","desc":"","updated":1655457392891,"created":1652954242758,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"9a2bd52692d036217559f962a88e54f2","links":[],"anchors":{"welcome-to-dendron":{"type":"header","text":"Welcome to Dendron","value":"welcome-to-dendron","line":7,"column":0,"depth":2},"lookup":{"type":"header","text":"Lookup","value":"lookup","line":11,"column":0,"depth":3}},"children":["nd2nkpjzc9hp9yhddsgf49w","djmknwf8xylsk3bwbyzgqwa","ygf9ydcqcmf3bdi4wyk3x58","2m3ygofcj8yajjevvh51ask","b9usa34mum3s56s60buxilt","witebak8d2ks87mmo9ofhui","wvvka5dtr8y49ssrhz0ja7d","moclflptspqmdjzdo2mo3x5","omuf127ul29qp4ebuvejtep"],"parent":null,"data":{},"body":"## Welcome to Dendron\n\nThis is the root of your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top.\n\n### Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enablePrettyLinks":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"enableTaskNotes":true,"siteUrl":"https://shivayan-bora.github.io","assetsPrefix":"/Personal-Knowledge-Vault","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}