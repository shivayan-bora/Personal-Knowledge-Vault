{"pageProps":{"note":{"id":"a4giff4ll5fjz456rcnp7l1","title":"Usage","desc":"","updated":1654759108481,"created":1654698251036,"custom":{},"fname":"cs.webdev.frontend.language.js.jsframework.react.state-management.tools.react-query.apis.useQuery.query-keys.usage","type":"note","vault":{"fsPath":"vault"},"contentHash":"4208b95d779f9b647b3c960b2d538bcd","links":[],"anchors":{},"children":[],"parent":"x9oyvrcqbt8qs8rjbd8ra0t","data":{}},"body":"<h1 id=\"usage\">Usage<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#usage\"></a></h1>\n<p>1.For resources that don't need any extra parameters:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'labels'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchLabels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'issues'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchIssues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>2.We can separate the different parts of our query key into separate items, like any parameters, IDs, indices - anything that our query depends on. These could be anything: literal strings, numbers, objects, or nested arrays.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'labels'</span><span class=\"token punctuation\">,</span> labelName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchLabel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'issues'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchIssues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>3.To write an effective query key, we need to start with the most generic item to the most specific. However, to start off, it's best to put in a string key at the beginning of the array to uniquely identify the kind of data being fetched as well as identify it from the cache.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'issues'</span><span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">,</span> repo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> queryFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>4.Make sure not to put the same query key for two different different queries as they will overlap each other's data based on whatever was called later. e.g.:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> usersQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>userId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> commentsQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>commentId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchComments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>If we use incrementing id's for both users and comments, at one point when both of them have a value of <code>1</code>, it will cause a key collision and it will override the data in the cache.</p>\n<p>5.We can also use Objects in the query key. e.g. Let's imagine the following scenario:</p>\n<p>Here's what that Github URL looks like when using a filter to get only closed issues: [https://api.github.com/repos/uidotdev/usehooks/issues?state=closed].\nHere, we're keeping the <code>open</code> and <code>closed</code> state in React state. The most na√Øve approach would be to to put the filter in as the last item of the query key array.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Issues</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> owner<span class=\"token punctuation\">,</span> repo <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>issueState<span class=\"token punctuation\">,</span> setIssueState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">const</span> issuesQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'issues'</span><span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">,</span> repo<span class=\"token punctuation\">,</span> issueState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> queryFn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token spread operator\">...</span> \n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>This would work just fine. Whenever our state changes, the query will rerun. If we have multiple sets of filters, since changing the order of the array will change the query key, we can have filter as an object, so now the order doesn't matter.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Issues</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> owner<span class=\"token punctuation\">,</span> repo <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>issueState<span class=\"token punctuation\">,</span> setIssueState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>assignee<span class=\"token punctuation\">,</span> setAssignee<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>labels<span class=\"token punctuation\">,</span> setLabels<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">const</span> issuesQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'issues'</span><span class=\"token punctuation\">,</span> \n                                    owner<span class=\"token punctuation\">,</span> \n                                    repo<span class=\"token punctuation\">,</span> \n                                    <span class=\"token punctuation\">{</span> \n                                        <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> issueState<span class=\"token punctuation\">,</span> \n                                        assignee<span class=\"token punctuation\">,</span> \n                                        <span class=\"token literal-property property\">labels</span><span class=\"token operator\">:</span> labels <span class=\"token operator\">||</span> <span class=\"token keyword nil\">undefined</span> \n                                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n                                <span class=\"token punctuation\">]</span>\n                                <span class=\"token punctuation\">,</span> queryFn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token spread operator\">...</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"2rzu5qtc4erc8gkfiteeysj","title":"Root","desc":"","updated":1655457392891,"created":1652954242758,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"9a2bd52692d036217559f962a88e54f2","links":[],"anchors":{"welcome-to-dendron":{"type":"header","text":"Welcome to Dendron","value":"welcome-to-dendron","line":7,"column":0,"depth":2},"lookup":{"type":"header","text":"Lookup","value":"lookup","line":11,"column":0,"depth":3}},"children":["nd2nkpjzc9hp9yhddsgf49w","rbctmastkcbqbiabtnkzhmr","06yuueoetds1eonsugjslrh"],"parent":null,"data":{},"body":"## Welcome to Dendron\n\nThis is the root of your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top.\n\n### Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enablePrettyLinks":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"enableTaskNotes":true,"siteUrl":"https://shivayan-bora.github.io","assetsPrefix":"/Personal-Knowledge-Vault","searchMode":"lookup","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}