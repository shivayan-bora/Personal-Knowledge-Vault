{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"## Welcome to Dendron\n\nThis is the root of your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top.\n\n### Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)\n","n":0.132}}},{"i":2,"$":{"0":{"v":"Meet","n":1}}},{"i":3,"$":{"0":{"v":"2022","n":1}}},{"i":4,"$":{"0":{"v":"07","n":1}}},{"i":5,"$":{"0":{"v":"Service Fabric Session","n":0.577},"1":{"v":"_Edit the [[dendron.templates.meet]] note to change this template generated for Dendron Meeting Notes._\n\n## Attendees\n\n- @VipinPanwar\n- @AkshayKaushik\n\n## Goals\n\nKnowledge sharing session on Service Fabric and Standalone as new folks in the team have no exposure to it.  \n\n## Agenda\n\n1. SF Full Suite --> Overview, repos, how we promote images to SF, pipeline,  installation etc --> [@AakashKaushik](https://uipath.enterprise.slack.com/team/WLZK1TW4F)\n2. SF Standalone --> Differences with SF Full suite, Installation, pipelines --> [@VipinPanwar](https://uipath.enterprise.slack.com/team/WLXPLG6JH)\n\n## Minutes\n\n- SF Full Suite is a way to allow customers to install all or some UiPath services on an on-premise server based on some configurations.\n- Offline installation - Air Gap - No internet access - Prerequisites are bundled and provided.\n- Online - Have internet connection, and download packages needed.\n- Customer provides all the infrastructure.\n- ArgoCD => All deployments visible\n- Tech: Kubernetes, Docker, Azure\n- AI Fabric - Helm Charts - `build-service-fabric-helm-charts`\n\n## Action Items\n","n":0.086}}},{"i":6,"$":{"0":{"v":"Daily","n":1}}},{"i":7,"$":{"0":{"v":"Journal","n":1}}},{"i":8,"$":{"0":{"v":"2022","n":1}}},{"i":9,"$":{"0":{"v":"08","n":1}}},{"i":10,"$":{"0":{"v":"2022-08-29","n":1},"1":{"v":"This template was applied using the daily journal schema. Edit the [[templates.daily]] note to change this template.\nTo create your own schemas to auto-apply templates when they match a hierarchy, follow the [schema tutorial](https://blog.dendron.so/notes/P1DL2uXHpKUCa7hLiFbFA/) to get started.\n\n<!--\nBased on the journaling method created by Intelligent Change:\n- [Intelligent Change: Our Story](https://www.intelligentchange.com/pages/our-story)\n- [The Five Minute Journal](https://www.intelligentchange.com/products/the-five-minute-journal)\n-->\n\n## Morning\n\n<!-- Fill out this section after waking up -->\n\n### Gratitude\n\nI am grateful for:\n\n1. Having a healthy relationship soon to be married.\n2. Having an amazing partner.\n3. Having a challenging and high paying job.\n\n### What would make today great?\n\n1. If the plan for Lakhimpur that me and my fiance came up with works.\n2. Dad totally agrees with the plan.\n3. My integration tests pass.\n\n### Daily affirmations\n\nI am a good person.\nI am kind and giving.\nI am not like my father or my sister.\n\n## Evening\n\n<!-- Fill out this section before going to sleep, reflecting on your day -->\n\n### Amazing things that happened today\n\n1.\n2.\n3.\n\n### How could I have made today even better?\n\nI could have made today better by\n","n":0.078}}},{"i":11,"$":{"0":{"v":"Dendron","n":1}}},{"i":12,"$":{"0":{"v":"Templates","n":1}}},{"i":13,"$":{"0":{"v":"Zettel","n":1}}},{"i":14,"$":{"0":{"v":"Meeting Notes Template","n":0.577},"1":{"v":"_Edit the [[dendron.templates.meet]] note to change this template generated for Dendron Meeting Notes._\n\n## Attendees\n<!-- Meeting attendees. If you prefix users with an '@', you can then optionally click Ctrl+Enter to create a note for that user. -->\n\n- @JohnDoe\n\n## Goals\n<!-- Main objectives of the meeting -->\n\n## Agenda\n<!-- Agenda to be covered in the meeting -->\n\n## Minutes\n<!-- Notes of discussion occurring during the meeting -->\n\n## Action Items\n<!-- You can add any follow up items here. If they require more detail, you can use `Create Task Note` to create each follow up item as a separate note. -->\n\n- Follow Up Task 1\n- Follow Up Task 2\n","n":0.099}}},{"i":15,"$":{"0":{"v":"Templates","n":1}}},{"i":16,"$":{"0":{"v":"Meeting Notes Template","n":0.577},"1":{"v":"_Edit the [[templates.meet]] note to change this template generated for Dendron Meeting Notes._\n\n## Attendees\n\n<!-- Meeting attendees. If you prefix users with an '@', you can then optionally click Ctrl+Enter to create a note for that user. -->\n\n- @john-doe\n\n## Goals\n\n<!-- Main objectives of the meeting -->\n\n## Agenda\n\n<!-- Agenda to be covered in the meeting -->\n\n## Minutes\n\n<!-- Notes of discussion occurring during the meeting -->\n\n## Action Items\n\n<!-- You can add any follow up items here. If they require more detail, you can use `Create Task Note` to create each follow up item as a separate note. -->\n\n- Follow Up Task 1\n- Follow Up Task 2\n","n":0.099}}},{"i":17,"$":{"0":{"v":"Literature","n":1}}},{"i":18,"$":{"0":{"v":"Daily Journal Template","n":0.577},"1":{"v":"This template was applied using the daily journal schema. Edit the [[templates.daily]] note to change this template.\nTo create your own schemas to auto-apply templates when they match a hierarchy, follow the [schema tutorial](https://blog.dendron.so/notes/P1DL2uXHpKUCa7hLiFbFA/) to get started.\n\n<!--\nBased on the journaling method created by Intelligent Change:\n- [Intelligent Change: Our Story](https://www.intelligentchange.com/pages/our-story)\n- [The Five Minute Journal](https://www.intelligentchange.com/products/the-five-minute-journal)\n-->\n\n## Morning\n\n<!-- Fill out this section after waking up -->\n\n### Gratitude\n\nI am grateful for:\n\n1.\n2.\n3.\n\n### What would make today great?\n\n1.\n2.\n3.\n\n### Daily affirmations\n\nI am...\n\n## Evening\n\n<!-- Fill out this section before going to sleep, reflecting on your day -->\n\n### Amazing things that happened today\n\n1.\n2.\n3.\n\n### How could I have made today even better?\n\nI could have made today better by\n","n":0.097}}},{"i":19,"$":{"0":{"v":"Tags","n":1}}},{"i":20,"$":{"0":{"v":"TS","n":1},"1":{"v":"\nTypeScript references.\n","n":0.707}}},{"i":21,"$":{"0":{"v":"Todo","n":1},"1":{"v":"\nTasks to do.\n","n":0.577}}},{"i":22,"$":{"0":{"v":"Important","n":1},"1":{"v":"\nImportant things to remember.\n","n":0.5}}},{"i":23,"$":{"0":{"v":"Notes","n":1}}},{"i":24,"$":{"0":{"v":"Webdev","n":1}}},{"i":25,"$":{"0":{"v":"Vi","n":1},"1":{"v":"\n## What is Vi?\n\nVi is a text editor that is available on most Linux distributions. It is a command-line based text editor. It is a very powerful text editor and is used by many developers.\n\n## Modes\n\n- **Command Mode**: The default mode when you open the editor. You can use the commands to navigate and edit the file e.g. copy or paste lines or delete a line or a word or to navigate between lines.\n\nYou can move around the file using the arrow keys or the `hjkl` keys.\n\n![Moving around](/assets/images/2022-09-22-14-11-30.png)\n\nDelete a character using `x`.\n\nDelete a line using `dd`.\nPP\nCopy a line using `yy`.\n\nPaste a line using `p`.\n\nScroll down using `Ctrl + d`.\n\nScroll up using `Ctrl + u`.\n\n`:` is used to take you to the prompt where you can enter a command.\n\nTo save the file, use `:w`. You can optionally specify the file name to save the file as. For example, `:w new_file.txt`.\n\nTo discard the changes, use `:q`.\n\nTo save and quit, use `:wq`.\n\nIf you want to find a word in the file, use `/` followed by the word. For example, `/hello`. When you do this, the cursor will move to the first occurrence of the word. To move to the next occurrence, use `n`.\n\n- **Insert Mode**: You can use this mode to insert text into the file i.e. insert contents to the file. You can switch to this mode by pressing `i` or `a` or `o` or `I` or `A` or `O`.\n\nTo switch back to the command mode, press `Esc`.\n","n":0.064}}},{"i":26,"$":{"0":{"v":"Redux","n":1},"1":{"v":"\nThe Redux API:\n\n1. `applyMiddleare`\n2. `compose`\n3. `createStore`\n4. `bindActionCreators`\n5. `combineReducers`\n\nThere are some other API's we use in React-Redux but they aren't a part of Redux.\n\nWe have a `useReducer` hook in React but that doesn't have all the bells and whistles that Redux has e.g. middleware, dev tools, combining higher order functions etc. While we can use the `useReducer` hook for smaller applications but for larger applications we should use Redux.\n\nRedux and Context API in React are somewhat similar. They both allow us to share state across components. The difference is that Redux is a state management library and Context API is a state sharing library. Redux is a state management library that allows us to manage state in a predictable way. Context API is a state sharing library that allows us to share state across components.\n\nAlso, internally Redux and `useReducer` uses the Context API in React-Redux. Context API in React-Redux gives access to the Store in your entire application.\n\n`compose()` allows you to take a bunch of functions and create one function that will pass a value through each of them.\n\n```js\nconst makeLouder = (string) => string.toUpperCase();\nconst repeatThreeTimes = (string) => string.repeat(3);\nconst embolden = (string) => string.bold();\n\nconst makeLouderrepeatThreeTimesembolden = (string) =>\n  embolden(repeatThreeTimes(makeLouder(string)));\nconst makeLouderrepeatThreeTimesemboldenWithCompose = \n  compose(embolden, repeatThreeTimes, makeLouder);\n\nconsole.log(makeLouderrepeatThreeTimesembolden(\"hello\")); // <b>HELLOHELLOHELLO</b>\nconsole.log(makeLouderrepeatThreeTimesemboldenWithCompose(\"hello\")); // <b>HELLOHELLOHELLO</b> \n```\n\n## Reducer\n\nPure Function. State of Application and something that happened comes in New State comes out.\n\n![Reducer](2022-09-14-15-03-02.png)\n\n`combineReducer`: A single reducer is not going to scale, hence we can divide it into smaller reducers and then combine them into a single reducer.\n\n## Store\n\n- `dispatch`:\n- `subscribe`:\n- `getState`: Get the current state of the application.\n- `replaceReducer`: Takes an argument which is a new reducer and it swaps it out with the current one. Used for code splitting.\n\n## Action\n\nAction is an object where we mandatorily have an action type that tells the reducer on what kind of action it is.\n\nYou can have a payload as well.\n\n```js\nconst incrementAction = {\n  type: \"INCREMENT\",\n  payload: 5,\n};\n```\n","n":0.056}}},{"i":27,"$":{"0":{"v":"Procreate","n":1},"1":{"v":"\n1. Alpha Lock: The Alpha lock allows you to only paint on the existing pixels on the current layer and not outside it.\n2. Clipping Mask: It works the same as the alpha lock but it creates a new layer on top of the current layer.\n3. Masks: Masks creates a new layer on top of the current layer and you can paint black to erase something painted on the current layer and white to reveal something painted on the current layer.\n4. Layer Modes: Similar to bnlending modes. Need to dig in more.\n","n":0.105}}},{"i":28,"$":{"0":{"v":"Procrastination","n":1},"1":{"v":"\nThe usual cycle of trying to achieve goals:\n\nSet a goal e.g. to become a doctor/engineer/programmer/whatever -> Become highly motivated -> Create daily, weekly schedules and plan your study -> Motivation stays high -> Start studying and be productive -> See some results -> Become bored or stop seeing results -> Motivation drops -> Stop studying and procrastinate -> Feel bad about yourself -> Repeat\n\nThis cycle depends on the motivation and is not consistent. This continuous cycle of being highly motivated and being productive and then later falling into a slup and then again reigniting the motivation continuously is not sustainable and may lead to burnout.\n\nMany people deal with procrastination in incorrect ways with solutions that are unsustainable. People attribute their procrastination to low levels of motivation, then get trapped in a cycle of being motivated and unmotivated, which puts goals at risk when the unmotivated cycle inevitably becomes prolonged and you “burn out”.\n\nThe problem with this entire system of productivity is relying on motivation. Motivation is a very fickle thing. It can be easily lost and it can be easily regained. It is not a reliable source of energy. It is not a reliable source of productivity. It is not a reliable source of consistency.\n\nMotivation is extremely multifactorial. Lots of factors make up motivation. Each of these factors go up and down on a daily basis. We often don't make plans on what we need to do when we are not motivated.\n\nInstead of planning on tasks that need high necessary motivation, we can plan tasks that need low motivation, are easy, realistic and we can even do on our bad days. This way we can be productive and consistent even when we are not motivated.\n\nConsistency is much more important than bursts. Consistency builds habit and the motivation needed to do it becomes lower. Habits can become on autopilot. You don't procrastinate on something that's a habit, you procrastinate on something that takes effort and is harder to do.\n\nThis course will teach you to not be willpower dependent but willpower enhanced. You will learn to be consistent and develop good habits so your study can be put on autopilot. The system put in place will help you evaluate your problems and overcome them with a process to eliminate procrastination through trained habits.\n\nInstead of being willpower dependent, we should be willpower enhanced:\n\n1. We rely on habits which are on autopilot.\n2. When things get difficult, we try to incorporate better habits and evaluate the process which might need some willpower.\n3. We don't procrastinate.\n4. We consistently evaluate our process and try to improve it.\n\nThese habits need to be trained.\n","n":0.048}}},{"i":29,"$":{"0":{"v":"The Web's Next Transformation","n":0.5},"1":{"v":"\nMPA (Multipage Apps) => PEMPA (Progressively enhanced multi-page apps - JS Sprinkles) => SPA (Single Page Apps) => The Next Phase\n\n1. Data Persistence\n2. Routes\n3. Data Fetches (Reads)\n4. Data Mutations (Creates, Updates, Deletes)\n5. Rendering Logic\n\nPrisma - ORM for Node.js and TypeScript\n\n`<form>` only supports GET and POST\n\nMPA => Whatever mutation we do, we have to reload the page and have a history of all the pages we have visited. => Everything on server => Server serves html, css and minimal to no js.\n\nPEMPA => jQuery => jQuery is hard to maintain and is not a good fit for large applications. => jQuery used for DOM manipulation. => Code duplication. => Reandering happens partially in both client and server.\n\nSPA => Rendering everything in client. => Server just stores data. => No rendering happening on servers.\n\nPESPA (Progressively Enhanced SPA) => e.g. Remix, Svelte kit => No more API Routes\n\n1. Functional is the baseline - JS Used to enhance not enable\n2. Lazy Loading - intelligent pre-fetching (more than just JS Code)\n3. Pushes code to the server\n4. No manual duplication of UI code (as in PEMPAs)\n5. Transparent browser emulation (#useThePlatform)\n\nRemix makes all network requests and code splitting.\n\nIn Review:\n\n1. Transitions involve both frontend and backend\n2. Transitions are primarily about moving where the code lives (where it's written, who writes it and where it's run)\n3. Every transition had motivations\n4. Transtitions can impact UX and DX in both positive and negative ways\n5. Every transition comes with tradeoffs\n6. We are often unaware of the impact of tradeoffs untill after transition\n7. The transition to PESPAs improves both UX and DX\n","n":0.062}}},{"i":30,"$":{"0":{"v":"Linux","n":1},"1":{"v":"\n## Why Linux?\n\n- As per stackoverflow, Linux is the most common and the most loved platform used for development.\n- Most of the devops tools primarily need Linux and most of them are released on Linux first before moving on to other operating systems.\n\n## Linux Distributions\n\nThere are many Linux distributions available. Some of the popular ones are:\n\n- CentOS (Open Source RHEL)\n- Ubuntu\n- Red Hat Enterprise Linux (RHEL)\n- Fedora\n- Debian\n\n## Shell\n\nThe text-based CLI that helps you run commands to interact with the operating system is called the shell. The shell is the interface between the user and the operating system. For Linux, it's called the Linux shell.\n\n![Shell Types](/assets/images/2022-09-22-11-41-31.png)\n\n## Basic Commands\n\nCheatsheet: <https://www.guru99.com/linux-commands-cheat-sheet.html>\n\n- `echo`: Prints the given string to the terminal.\n- `ls`: Lists the files and directories in the current directory.\n- `cd`: Changes the current directory.\n- `pwd`: Prints the current working directory.\n- `mkdir`: Creates a new directory.\n\nTo run multiple commands, separate it by a semi-colon:\n\n```bash\n    echo \"Hello\"; echo \"World\"\n    cd new_dir; mkdir www; pwd\n```\n\n![Make a directory hierarchy](/assets/images/2022-09-22-11-45-22.png)\n\nRemember, the shell is case-sensitive. So, `mkdir` and `MKDIR` are different commands.\n\n## File System\n\nRemove a file:\n\n```bash\n    rm file.txt\n```\n\nRemove a directory using `rmdir`:\n\n```bash\n    rmdir new_dir\n```\n\nor:\n\n```bash\n    rm -r /tmp/new_dir\n```\n\n`-r` is used to remove a directory recursively.\n\nTo copy a file:\n\n```bash\n    cp file.txt file2.txt\n```\n\nThe first part is source file name and the second part is the destination file name.\n\nTo copy one directory and all of it's contents to another path:\n\n```bash\n    cp -r /tmp/new_dir /tmp/new_dir_copy\n```\n\nTo create a file:\n\n```bash\n    touch /tmp/new_dir/file.txt\n```\n\nTo add content to a file:\n\n```bash\n    cat > /tmp/new_dir/file.txt\n```\n\nYou can use `Enter` to add a new line and `Ctrl + D` to save the file.\n\nTo view the contents of a file:\n\n```bash\n    cat /tmp/new_dir/file.txt\n```\n\nTo move a file:\n\n```bash\n    mv /tmp/new_dir/file.txt /tmp/new_dir/file2.txt\n```\n\nThis is equivalent to renaming a file or cutting and pasting a file.\n\n## User Accounts\n\n`whoami` prints the current user.\n\n`id` prints the user id and the group id.\n\n`su` switches to another user.\n\n`ssh user@host` allows you to connect to a remote `host` with `user`.\n\nEvery Linux system has a root user who has no restrictions on the system and can perform any task. This is why in most production environments or enterprise environments, access to the root user is restricted, and you'll almost never login to the system as the root user.\n\nA root user can grant root access to a regular user by granting them `sudo` privileges by making an entry to the `/etc/sudoers` file. So the user is a regular user with root privileges.\n\nWhen a regular user is granted a `sudo` privilege, they can now elevate their permission level and perform tasks that they otherwise couldn't by using a prefix any command with the keyword `sudo`.\n\n![Granting sudo privileges](/assets/images/2022-09-23-14-17-27.png)\n\n## Download files\n\n`curl -O https://example.com/file.txt` downloads the file to the current directory. `-O` option is used to save the result to a file.\n\n`wget https://example.com/file.txt -O some-file.txt` downloads the file to the current directory.`-O` option is used to specify the name of the file that you want it to store locally as.\n\n## Check OS Version\n\n`ls /etc/*release*` prints the OS version.\n\n`cat /etc/*release*` prints more details about the OS version.\n\n## Package Managers\n\nPackage managers are used to install, update, and remove software packages on the system.\n\nCentOS and Red Hat Enterprise Linux use RPM (Red Hat Package Manager) package manager.\n\nA software is packaged into a bundle with the extension `.rpm`. This bundle contains all the files that are required to run the software.\n\nTo install a package:\n\n```bash\n    rpm -i package.rpm\n```\n\nTo uninstall a package:\n\n```bash\n    rpm -e package.rpm\n```\n\nTo query a package:\n\n```bash\n    rpm -q package.rpm\n```\n\nTo check the version installed:\n\n```bash\n    rpm -qa | grep package\n```\n\nTo update a package:\n\n```bash\n    rpm -U package.rpm\n```\n\nRPM don't install dependencies automatically. So, you'll have to install the dependencies manually.\n\nSo you need a solution that can install dependencies automatically. This is where `yum` comes in.\n\n`yum` is a high level package manager that is used to install, update, and remove software packages on the system. `yum` uses `rpm` under the hood.\n\nTo install a package:\n\n```bash\n    yum install ansible\n```\n\nYum searches software repositories that act as warehouses containing hundreds and thousands of software rpm packages. These repositories can be local or remote or available publicly in the internet.\n\nWhen you install a package using `yum`, it automatically finds the dependencies and installs them in order of requirement.\n\nThe list of repositories that are configured on the system can be found in the `/etc/yum.repos.d/` directory.\n\nEvery OS comes bundled with its own set of repositories. You can add more repositories to the system by adding them to the `/etc/yum.repos.d/` directory.\n\nTo see the list of repositories that are configured on the system:\n\n```bash\n    yum repolist\n```\n\nListing the files under the `/etc/yum.repos.d/` directory, shows the files where these repositories are configured:\n\n```bash\n    ls /etc/yum.repos.d/\n```\n\nIf you check the contents of these configuration files, you will see the URL of the location where all packages are stored.\n\n![YUM Repos](/assets/images/2022-10-03-12-03-54.png)\n\nIf you visit the URL, you will see the list of packages(`.rpm` files) that are available in the repository.\n\nTo see the list of packages that are installed on the system, followed by the package name, if you want to search for it's particular package:\n\n```bash\n    yum list ansible\n```\n\nTo remove a package:\n\n```bash\n    yum remove ansible\n```\n\nTo show all the list of available versions of a package:\n\n```bash\n    yum --showduplicates list ansible\n```\n\nTo install a specific version of a package:\n\n```bash\n    yum install ansible-2.9.6\n```\n","n":0.034}}},{"i":31,"$":{"0":{"v":"Internet Fundamentals","n":0.707},"1":{"v":"\nThe client => The device is front of you e.g. phones, tablets, laptop etc. => Runs a web browsers\n\nServer => Where the public website resides => Two types\n\n- Hardware Server => Physical computer that serves the web pages => Runs programs that make your websites go.\n- Software Server => Program that runs to serve up the web pages e.g. Apache. => Executes commands to send out the files to your website to be seen.\n\n![How Internet works](2022-09-09-16-41-08.png)\n","n":0.115}}},{"i":32,"$":{"0":{"v":"Angular","n":1},"1":{"v":"\n### Why Angular\n\n1. Angular follows common and familiar enterprise patterns and conventions. This means if you have a background in Java or dotnet, and you're familiar or comfortable with the class based approach, you'll feel right at home with Angular. This can be seen from the fact that Angular is built on TypeScript, which is a superset of JavaScript that adds static typing and class based object oriented programming to the language.\n\n2. Angular is a batteries included framework. This means that you don't have to worry about the plumbing. Angular takes care of the plumbing for you. This includes things like routing, state management, and data fetching. This means that you can focus on the business logic of your application and not worry about the plumbing. Unlike React which needs a routing library like React Router, state management library like Redux, and data fetching library like Apollo, Angular takes care of all of this for you.\n\n3. Ships with tooling to accelerate the developer workflow. Angular CLI and NX Dev Tool.\n\n4. Rich and Vibrant ecosystem.\n\n5. Proven track record.\n\n![AngularJS 1.x Big Picture](2022-09-08-16-31-59.png)\n\n![The Simpler Angular](2022-09-08-16-32-51.png)\n\n### Modules\n\nTwo flavours inside Angular:\n\n- ES6 Modules:\n  - Organization at a language level.\n  - Uses ES6 Module Syntax.\n  - Modules export things that other modules can import.\n\n```js\nimport { Component, OnInit } from '@angular/core';\nimport { ItemService, Item } from '../shared';\n\n@Component({\n  selector: 'app-items',\n  templateUrl: './items.component.html',\n  styleUrls: ['./items.component.css']\n})\nexport class ItemsComponent implements OnInit {}\n```\n\n- @NgModule:\n  - Organization at a framework level.\n  - Tells Angular how to configure itself so that it knows what exists and how it needs to fit together.\n  - `declarations` - Define view classes that are available to the module.\n  - `imports` - Define a list of modules that the module needs.\n  - `providers` - Define a list of services the module makes available.\n  - `exports` - Define a list of modules the module makes available.\n  - `bootstrap` - Define the component that should be bootstrapped.\n\n```js\n@NgModule({\n    // Here's the modules we're importing\n    imports: [\n        BrowserModule, \n        AppRoutingModule, \n        BrowserAnimationsModule, \n        MaterialModule, \n        HttpClientModule\n    ],\n    // Here's the components we're declaring\n    declarations: [AppComponent, HomeComponent],\n    // Here's the providors that we want to consume\n    providers: [ \n        AuthService, \n        NotificationService\n    ],\n    // We're going to bootstrap on the AppComponent\n    bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nAt the very highest level, when we're spinning this application up, hen we tell Angulat to go ahead and bootstrap the AppModule:\n\n```js\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```\n\nLike React, Angular also consists of a tree shaped component hierarchy with the root module at the top which is the entry point (root `div` in React) and every other components as it's branches and leaves. This helps in promoting a unidirectional data flow from top to bottom (`props` in React). But then if there's an event, that can be propagated up the tree (Event Bubbling).\n\n### Getting Started\n\nLike Create React App, we have Angular CLI. Angular CLI enables us to use ng which is used for a lot of functionalities which will come later.\n\n```bash\nnpm install -g @angular/cli\n```\n\nTo create a new app:\n\n```bash\nng new my-first-project\n```\n\n### Components\n\nLike React, Angular also has a reusable component based structure for creating web apps.\n\nA component consists of three things:\n\n1. Component Class: Handles the data and functionality.\n2. HTML Template: Determines the structure of UI. (`app.component.html`)\n3. Component-specific styles: Defines the look and feel. (`app.component.css`)\n\nWe can write global styles in `styles.css`.\n\nWe use `class` to bind classes to the template.\n\n```html\n<div class=\"product\" [class.selected]=\"product.isSelected\"></div>\n```\n\nIn React we do the same by:\n\n```jsx\n<div className={`product ${product.isSelected ? 'selected' : ''}`}></div>\n```\n\n### State\n\nThe state of a component is the data that it holds. In Angular, we can store the state of a component in a class property. We can then use this property in the template to display the data. It is stored in `app.component.ts`:\n\n```js\nexport class AppComponent {\n  newMemberName: string = '';\n  members: string[] = [];\n}\n```\n\n### Event Handling\n\n### Directives\n\nIn angular, we have structural directives which are used to change the structure of the DOM. Structural directives are denoted by `*` in the template. For example, `*ngIf` is used to conditionally render a component.\n\n```html\n<div *ngIf=\"isUserLoggedIn\">Welcome to the app</div>\n```\n\nIn React we do the same by:\n\n```jsx\n{isUserLoggedIn && <div>Welcome to the app</div>}\n```\n\nAngular also has a similar syntax for conditional rendering.\n\n```html\n<div [hidden]=\"!isUserLoggedIn\">Welcome to the app</div>\n```\n\nFor repeating a component, we use `*ngFor` in Angular.\n\n```html\n<div *ngFor=\"let product of products\">\n</div>\n```\n\nWe do the same in React by:\n\n```jsx\n{products.map(product => <div>{product}</div>)}\n```\n\nInterpolation is used to bind data to the template. We use `{{}}` to do the same.\n\n```html\n<div>{{product}}</div>\n```\n\nWe do the same in React by:\n\n```jsx\n<div>{product}</div>\n```\n","n":0.037}}},{"i":33,"$":{"0":{"v":"Learning","n":1}}},{"i":34,"$":{"0":{"v":"Understanding Phase","n":0.707}}},{"i":35,"$":{"0":{"v":"Structuring Connections","n":0.707},"1":{"v":"\nThe first step to learning anything new is to make connections or associations between new information and what you already know. This is called learning through association.\n\nWays of learning through association:\n\n1. Compare and Contrast: Compare the similarities and the differences between concepts.\n2. Part and Whole: Breakdown a big idea into some medium ideas and further break it down in small and basic ideas.\n\nTo breakdown concepts, we can use the T-Tree framework.\n![T-Tree Framework](/assets/images/2022-06-17-14-53-26.png)\n\nExample: If you take a look at the book of contents of a textbook, the underlying structure might look like this:\n![Example of T-Tree](/assets/images/2022-06-17-14-55-23.png)\n\nWhen structuring information, the relationship between different ideas i.e. branches/twigs is more important than the details of the ideas i.e. leaves.\n\nThe T-Tree framework borrows it's structure from a textbook, however, if you want to have some structure of your own, then use Mind Maps.\n\nTo structure your knowledge better, make meaningful notes and try to make it more visual as it's said, `a picture is worth a 1000 words`.\n\nTips:\n\n1. Structure the information in your own words.\n2. Use less words.\n3. Group ideas together.\n4. Use more pictures and visuals.\n5. Practice.\n","n":0.075}}},{"i":36,"$":{"0":{"v":"Mix It Up","n":0.577},"1":{"v":"\nThe idea of mixing consists of two main parts:\n\n1. Learning the same topic from multiple angles/resources.\n2. Learning different topics at the same time.\n","n":0.209}}},{"i":37,"$":{"0":{"v":"Deepen Comprehension","n":0.707},"1":{"v":"\nOne of the best techniques to learn something is Teaching as in this you try to make the other person understand based on your own understanding of a topic which might allow you to find gaps in your own knowledge. Teaching also forces us to package our messy webs of information into something more comprehensible for the other person to understand.\n\nOne of the ways to tech is the whole-part-whole technique. First of all, summarize the whole concept. Then dive into the individual parts of the concept and then relate that part with the whole concept to show where it fits.\n\nAnother technique is the Feynman Technique:\n![Feynman Technique](/assets/images/2022-06-17-16-40-46.png)\n","n":0.097}}},{"i":38,"$":{"0":{"v":"Remembering Phase","n":0.707}}},{"i":39,"$":{"0":{"v":"Spacing","n":1},"1":{"v":"\nSpacing is a key concept when it comes to learning. Spacing is practically reviewing the material you have learned after sometime to retain the knowledge.\n\nThe key is when and how to space out the material you have learned.\n\nFor when, let's take an analogy of plants. Some plants needs more water to grow. Some plants needs less water to grow. This can be similar to the difficulty of different topics. The difficult topics need to be reviewed more often. Just because some plants need more water to grow, does not mean that we will give them all the water. Because, overwatering a single plant continuously on the same day is not a good idea. It is better to space out the watering. The key is to find an optimal watering schedule in which our plants can thrive.\n\nAlso, newer memories tend to fade away faster than old memories that we have already recalled and applied multiple times. The reason spacing works is because it mimics the science of decay. Newer memories are forgotten (decay) quickly but reviewing them multiple times makes it harder to forget (increases their time until decay). For something you have learned today, you should review it probably on the same day, then the next, then 3 days later etc.\n\nSomething you've known for longer can be spaced out even longer like weeks, months etc.\n\nBecause of the above reasons, cramming is a terrible idea for learning and long-term retention.\n\nHow to implement spacing?\n\n1. Dissect the material you have learned into digestible pieces that are easy to review. This is done by following the techniques of T-Trees in [[learning.understanding-phase.structuring-connections]]. The leaves of the T-Tree are the pieces of material you need to review.\n2. Create a spacing schedule. This is a list of dates when you need to review the material.\n","n":0.058}}},{"i":40,"$":{"0":{"v":"Procrastination","n":1}}},{"i":41,"$":{"0":{"v":"Quick Tips","n":0.707},"1":{"v":"\n1. Make a list and break down the tasks into smaller chunks.\n2. Set yourself up for success by removing any kind of distraction and doing things that'll enable us to do the task in hand.\n3. Get started on the task beforehand, even for a few minutes, so that it doesn't look very overwhelming when we are actually about to do it.\n4. Get a group or a few accountability partners.\n5. Aim for a personal best instead of perfection as it's one of the biggest causes of procrastination.\n","n":0.108}}},{"i":42,"$":{"0":{"v":"Time Management","n":0.707}}},{"i":43,"$":{"0":{"v":"Urgency Trapping","n":0.707},"1":{"v":"\nOur brains are quite incapable of prioritizing tasks on a regular basis for the modern day mostly for medium to long term.\n\nWe always prioritize tasks that are urgent and that might not be the best case scenario. e.g. in college and schools we used to get homeworks and they always have a time limit. However, prioritizing homework over quality studying is not always the best case scenatio. In fact, research suggests, too much homework can be harmful to grades.\n\nSomething like learning 15 minutes everyday on learning techniques is not something our brain considers urgent, but, that can be very important in the long term as it can save a lot of time and effort.\n\nTo combat urgency trapping, we need to schedule things that're important first, rather than the urgent ones.\n","n":0.088}}},{"i":44,"$":{"0":{"v":"Time Vs Task Management","n":0.5},"1":{"v":"\nFiguring out what tasks we have to do and managing things around that is called task management.\n\nTime management is putting tasks on schedule and getting things done on a daily, weekly or monthly basis.\n","n":0.171}}},{"i":45,"$":{"0":{"v":"Second Brain","n":0.707},"1":{"v":"\nSecond Brain is practically a Personal Knowledge Management system, in which anything you read, watch and listen to, that you resontate with, is stored and then you can use that to organize your ideas and thoughts to ultimately convert them into your creative output.","n":0.151}}},{"i":46,"$":{"0":{"v":"Fundamentals","n":1}}},{"i":47,"$":{"0":{"v":"Projects over Categories","n":0.577},"1":{"v":"\nAssociate ideas to whatever project you're working on. Ideas placed in categories aren't much helpful.","n":0.258}}},{"i":48,"$":{"0":{"v":"Idea Recycling","n":0.707},"1":{"v":"\nIdeas aren't single use but rather we can recycle and reuse them in various places.","n":0.258}}},{"i":49,"$":{"0":{"v":"Capture Habit","n":0.707},"1":{"v":"\nOur brains are for having ideas and not storing them. Capture ideas as soon as possible as our brains aren't going to hold on to them forever.\n","n":0.192}}},{"i":50,"$":{"0":{"v":"Borrowed Creativity","n":0.707},"1":{"v":"\n`Good artists create and Great artists steal.`\n\nCreativity is all about remixing stuff. It's about borrowing ideas from things that already exist based on the things you watch, read and listen to and adding your own spin to them and combining things in interesting ways.\n","n":0.151}}},{"i":51,"$":{"0":{"v":"Design","n":1}}},{"i":52,"$":{"0":{"v":"Computer Science","n":0.707}}},{"i":53,"$":{"0":{"v":"Web Development","n":0.707}}},{"i":54,"$":{"0":{"v":"Backend","n":1}}},{"i":55,"$":{"0":{"v":"Language","n":1}}},{"i":56,"$":{"0":{"v":"Java","n":1},"1":{"v":"\nJava is an object-oriented programming language. The code is organized in classes within a `.java` file with methods inside it. It's a write-once, run anywhere kind of code.\n\n![write-once, run anywhere](/assets/images/2022-08-03-12-40-41.png)\n\nBut Java uses a lot of memory as compared to C and Rust.\n","n":0.154}}},{"i":57,"$":{"0":{"v":"Structure","n":1},"1":{"v":"\nSource File -> Class -> Methods -> Statements\n","n":0.354}}},{"i":58,"$":{"0":{"v":"Running Java Programs","n":0.577},"1":{"v":"\n1. First we will write the source code which is a high-level code that's not understood by the computer.\n2. Then we will use a `javac` compiler to compile our code into byte-code.\n3. This byte-code can be used by JVM's to execute the code. This byte-code gets converted into 0's and 1's for the computer to understand.\n\n![Running a Java Program](/assets/images/2022-08-03-12-50-24.png)\n","n":0.13}}},{"i":59,"$":{"0":{"v":"Java Virtual Machine","n":0.577},"1":{"v":"\nJVM or the Java Virtual Machines are responsible for running Java bytecodes in different platforms. They convert the byte-code into something machines can understand. JVM can optimize your code while running it, making it possible to create fast applications without having to swrite specialized high-performance code.\n","n":0.147}}},{"i":60,"$":{"0":{"v":"Application Framework","n":0.707},"1":{"v":"\nAn application framework is a set of common software functionalities that provides a foundational structure for developing an application.\n","n":0.229}}},{"i":61,"$":{"0":{"v":"Tools","n":1}}},{"i":62,"$":{"0":{"v":"Spring","n":1},"1":{"v":"\nA typical application structure looks like this:\n\n![Layers of Application](/assets/images/2022-07-30-17-35-27.png)\n\n**Web Layer**: Takes care of the UI or the [[cs.webdev.frontend]]. If the UI needs some data to show to the user, it calls the Business layer.\n\n**Business Layer**: Place where your business logic lies. If business layer needs some data, it calls some class which is present inside the Data Layer.\n\n**Data Layer**: Talks with the external interfaces as well as the Database.\n\nSo, Web Layer --> Dependent on --> Business Layer --> Dependent on --> Data Layer\n\nSpring framework instantiates objects and populates the dependencies. It's us developers who are responsible for telling the framework on what are the objects it needs to manage and what are it's dependencies.\n","n":0.094}}},{"i":63,"$":{"0":{"v":"Concepts","n":1}}},{"i":64,"$":{"0":{"v":"Inversion of Control","n":0.577},"1":{"v":"\nConsider this example.\n\n```java\npublic class ComplexBusinessService {\n    // Creates a new instance of a BubbleSortAlgorithm class\n    SortAlgorithm sortAlgorithm = new BubbleSortAlgorithm();\n    ...\n}\n\npublic class BubbleSortAlgorithm implements SortAlgorithm {...}\n```\n\nHere the Class which needs the dependency is creating the instance of the dependency.\n\nHowever in the below example, Spring is the one that's creating the instance of the dependency:\n\n```java\n@Component\npublic class ComplexBusinessService {\n    @Autowired\n    SortAlgorithm sortAlgorithm;\n    ...\n}\n\n@Component\npublic class BubbleSortAlgorithm implements SortAlgorithm {...}\n```\n\nSpring takes the control from the class that needs the dependency to create an instance of the dependency. This is called Inversion of Control.\n","n":0.106}}},{"i":65,"$":{"0":{"v":"Ioc Container","n":0.707},"1":{"v":"\nIOC container is a generic terminology to represent anything that is implementing IOC. In case of Spring framework, the typical IOC container is the Application Context.\n","n":0.196}}},{"i":66,"$":{"0":{"v":"Application Context","n":0.707},"1":{"v":"\nApplication context is responsible for creating and managing all the beans.\n\n```java\n@SpringBootApplication\npublic class SpringIn10StepsApplication {\n\n public static void main(String[] args) {\n  // Returns an application context\n  ApplicationContext applicationContext = SpringApplication.run(SpringIn10StepsApplication.class, args);\n  // Getting the bean from the application context\n  BinarySearchImpl binarySearch = applicationContext.getBean(BinarySearchImpl.class);\n  int result = binarySearch.binarySearch(new int[] {12,4,6}, 3);\n }\n\n}\n```\n","n":0.141}}},{"i":67,"$":{"0":{"v":"Dependency Injection","n":0.707},"1":{"v":"\nLet's consider a simple example:\n\n```java\npublic class ComplexBusinessService {\n    SortAlgorithm sortAlgorithm;\n    ...\n}\n\npublic class BubbleSortAlgorithm implements SortAlgorithm {...}\n```\n\nHere we have a `ComplexBusinessService` class which needs another class `SortingAlgorithm` to perform some sort of sorting which aids in the business logic. We can say, the `ComplexBusinessService` is dependent on `SortingAlgorithm`.\n\nLikewise, in a bigger web application, we have thousands of classes and each class needs some other class to perform it's function, i.e. those classes need other classes as a dependency. So, in a typical application, you will have a lot of classes with a lot of dependency.\n\nBefore Spring came into picture, this is how we used to manage dependencies:\n\n```java\npublic class ComplexBusinessService {\n    // Creates a new instance of a BubbleSortAlgorithm class\n    SortAlgorithm sortAlgorithm = new BubbleSortAlgorithm();\n    ...\n}\n\npublic class BubbleSortAlgorithm implements SortAlgorithm {...}\n\n```\n\n`ComplexBusinessService` directly instantiates an object of `BubbleSortAlgorithm` class. If we would need our service to use a quick sort algorithm, we need to modify the code. This is called tight coupling i.e., `ComplexBusinessService` is tightly couple with `BubbleSortAlgorithm`, which is not considered a good practice.\n\nTo fix this, we would need to do the following:\n\n```java\npublic class ComplexBusinessService {\n    SortAlgorithm sortAlgorithm; // = new BubbleSortAlgorithm();\n    // Creates a constructor to accept a SortAlgorithm type object and instantiate our sorting algorithm\n    public ComplexBusinessService(SortAlgorithm sortAlgorithm) {\n        this.sortAlgorithm = sortAlgorithm;\n    }\n    ...\n}\n```\n\nNow whoever is using the `ComplexBusinessService`, can pass the type of`SortAlgorithm` to the constructor of `ComplexBusinessService`.\n\n```java\nSortAlgorithm sortAlgorithm = new BubbleSortAlgorithm();\nComplexBusinessService businessService = new ComplexBusinessService(sortAlgorithm);\n```\n\nAll the code is doing is creating object and populating the dependencies. This is Dependency Injection.\n","n":0.063}}},{"i":68,"$":{"0":{"v":"How","n":1},"1":{"v":"\nTo do this in Spring:\n\n```java\n@Component\npublic class ComplexBusinessService {\n    @Autowired\n    SortAlgorithm sortAlgorithm;\n    ...\n}\n\n@Component\npublic class BubbleSortAlgorithm implements SortAlgorithm {...}\n```\n\n@Component: Tells the spring framework that you need to manage instances of the annotated class.\n\n@Autowired: Tells the spring to start looking for the annotated dependency among the component it manages.\n","n":0.147}}},{"i":69,"$":{"0":{"v":"Beans","n":1},"1":{"v":"\nThe instances that Spring manages are called beans. e.g.\n\n```java\n@Component\npublic class ComplexBusinessService {\n    @Autowired\n    SortAlgorithm sortAlgorithm;\n    ...\n}\n\n@Component\npublic class BubbleSortAlgorithm implements SortAlgorithm {...}\n```\n\n`ComplexBusinessService` and `BubbleSortAlgorithm` are two beans.\n","n":0.196}}},{"i":70,"$":{"0":{"v":"Auto Wiring","n":0.707},"1":{"v":"\nThe process where Spring framework identifies the dependencies, and populates them. e.g.\n\n```java\n@Component\npublic class ComplexBusinessService {\n    @Autowired\n    SortAlgorithm sortAlgorithm;\n    ...\n}\n\n@Component\npublic class BubbleSortAlgorithm implements SortAlgorithm {...}\n```\n\n@Autowired tells Spring that `SortAlgorithm` is a dependency for the `ComplexBusinessService`.\n","n":0.171}}},{"i":71,"$":{"0":{"v":"Annotations","n":1}}},{"i":72,"$":{"0":{"v":"SpringBootApplication","n":1},"1":{"v":"\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SpringIn10StepsApplication {\n\n    public static void main(String[] args) {\n    BinarySearchImpl binarySearch = new BinarySearchImpl(new BubbleSortAlgorithm());\n    int result = binarySearch.binarySearch(new int[] {12,4,6}, 3);\n    System.out.println(result);\n\n    SpringApplication.run(SpringIn10StepsApplication.class, args);\n    }\n}\n```\n\nSpring boot would automatically scan the package and it's subpackages where the main application class is present for managing beans and dependencies. This is called component scan.\n\n`@SpringBootApplication` denotes the main application class.\n","n":0.129}}},{"i":73,"$":{"0":{"v":"Components","n":1},"1":{"v":"\nThis is used to manage [[cs.webdev.backend.language.java.application-framework.tools.spring.concepts.beans]] inside a spring application.\n\n```java\n@Component\npublic class ComplexBusinessService {...}\n\n@Component\npublic class BubbleSortAlgorithm implements SortAlgorithm {...}\n```\n","n":0.236}}},{"i":74,"$":{"0":{"v":"AutoWired","n":1},"1":{"v":"\nThis is helpful in doing [[cs.webdev.backend.language.java.application-framework.tools.spring.concepts.auto-wiring]].\n\n```java\n...\n@Autowired\n    SortAlgorithm sortAlgorithm;\n...\n```\n","n":0.354}}},{"i":75,"$":{"0":{"v":"Application Properties","n":0.707},"1":{"v":"\nYou can add properties of your application in `application.properties` file.\n","n":0.316}}},{"i":76,"$":{"0":{"v":"Debug Logs","n":0.707},"1":{"v":"\n```properties\nlogging.level.org.springframework = debug\n```\n\nYou can turn on the debug logs of specific modules in your application.\n","n":0.258}}},{"i":77,"$":{"0":{"v":"Front-end","n":1}}},{"i":78,"$":{"0":{"v":"Language","n":1}}},{"i":79,"$":{"0":{"v":"JavaScript","n":1},"1":{"v":"\nJavaScript is a programming language that conforms to the ECMAScript specification. It is a high-level, dynamic, untyped, and interpreted programming language.\n\nJavaScript is a single threaded and event-driven language. It is a prototype-based language and supports object-oriented programming.\n\nJS adds interactivity to the web page.\n","n":0.152}}},{"i":80,"$":{"0":{"v":"Tools","n":1}}},{"i":81,"$":{"0":{"v":"TypeScript","n":1},"1":{"v":"\nIt's a superset of JavaScript. JavaScript by defualt is dynamically typed. But TypeScript allows us to specify static types during compile time.\n\nHowever, this is not pure JavaScript i.e. the browser can't understand this syntax. For this, you might need a transpiler like [[cs.webdev.frontend.language.js.tools.babel]].\n","n":0.152}}},{"i":82,"$":{"0":{"v":"Types","n":1}}},{"i":83,"$":{"0":{"v":"Objects","n":1},"1":{"v":"\n```js\nlet person: Object\n```\n\nThis can be used to specify the type as Object but it's not a good standard. Instead we use `types` as follows:\n\n```js\ntype Person = {\n    age?: number;\n    name: string;\n}\n\nlet person: Person = {\n    name: 'Shivayan',\n    age: 32\n}\n```\n\n`?` here implies an optional parameter.\n\nThis `type` specifies an [[cs.webdev.frontend.language.js.tools.typescript.alias]] of an object.\n\nWe can have an array of objects also:\n\n```js\nlet persons: Person[]\n```\n\nWe can also use `interface` as well.\n","n":0.123}}},{"i":84,"$":{"0":{"v":"Functions","n":1},"1":{"v":"\n```js\nlet someFunction: Function\n```\n\nLike Objects, you can specify the type of a variable as a Function, however, it's not a good standard. We should do the following instead:\n\n```js\nlet printName: (name: string) => void\n```\n\nor\n\n```js\nlet printName: (name: string): void {\n    console.log(name)\n}\n```\n\nThis means that, we have a function `printName` which takes in a parameter `name` which is a `string` and returns `void` i.e. undefined. We can specify other return types also based on what we want.\n\nWe can specify `never` as the return type, which implies it never returns anything.\n","n":0.108}}},{"i":85,"$":{"0":{"v":"Basic Types","n":0.707},"1":{"v":"\n```js\nlet name: string\nlet age: number\nlet isStudent: boolean\n\n// Array of Strings\nlet hobbies: string[]\n\n// Tuple: Will accept a pair of number and string\nlet role: [number, string]\n```\n\nThere's an `any` type which means it can have any type, however, it defeats the purpose of having typescript.\n\n```js\nlet name: any\n```\n\nLike `any`, we also have an `unknown` type which means we don't know yet.\n\nIf you want to have a variable that can be either a `number` or a `string`, we can use a union operator (`|`) as follows:\n\n```js\nlet someVariable: number | string\n```\n","n":0.108}}},{"i":86,"$":{"0":{"v":"Alias","n":1},"1":{"v":"\nThe alias can be implemented in two ways:\n\n- With `type`:\n\n```js\ntype X = {\n    a: string;\n    b: number;\n}\n```\n\n- Interfaces:\n\n```js\ninterface Person {\n    name: string;\n    age?: number;\n}\n```\n","n":0.204}}},{"i":87,"$":{"0":{"v":"Difference between Types and Interfaces","n":0.447},"1":{"v":"\nThe basic difference lies between how the extend each other:\n\n- Two types:\n\n```js\ntype X = {\n    a: string;\n    b: number;\n}\n\ntype Y = X & {\n    c: string;\n    d: number;\n}\n```\n\n- Two interfaces:\n\n```js\ninterface Person {\n    name: string;\n    age?: number;\n}\n\ninterface Guy extends Person {\n    occupation: string;\n}\n```\n\n- One interface and one type:\n\n```js\ninterface Person {\n    name: string;\n    age?: number;\n}\n\ntype X = Person & {\n    a: string;\n    b: number;\n}\n```\n\nor\n\n```js\ntype X = {\n    a: string;\n    b: number;\n}\n\ninterface Person extends X {\n    name: string;\n    age?: number;\n}\n```\n","n":0.114}}},{"i":88,"$":{"0":{"v":"npm","n":1}}},{"i":89,"$":{"0":{"v":"Babel","n":1}}},{"i":90,"$":{"0":{"v":"Axios","n":1},"1":{"v":"\nAxios is a promise based HTTP client for the browser and node.js. It is isomorphic in nature i.e. it works in both the browser and node.js with the same codebase.\n\nOn the server side, Axios uses native node.js http module while on the client side, Axios uses the browser's XMLHttpRequest.\n","n":0.143}}},{"i":91,"$":{"0":{"v":"Why Axios","n":0.707},"1":{"v":"\nThe most common way for frontend browsers to communicate with the servers is via HTTP protocol. We generally use fetch or XMLHttpRequest object to communicate with the server over at the frontend natively through JavaScript.\n\nApart from that we use other JavaScript libraries like jQuery etc. which have their own interfaces like jQuery’s $.ajax() function for the same.\n\nAs developers move away from such libraries in favour of native JavaScript, dedicated HTTP clients like Axios emerged to fill the gap.\n\nAs with [fetch] and [XMLHttpRequest], Axios is a promise based HTTP client for the browser and node.js.\n","n":0.103}}},{"i":92,"$":{"0":{"v":"Advantages","n":1},"1":{"v":"\nSome of the advantages of Axios include:\n\n1. Request and response interception.\n2. Streamlined error handling.\n3. Protection against XSRF.\n4. Support for upload progress.\n5. Response timeout.\n6. The ability to cancel requests.\n7. Support for older browsers.\n8. Automatic JSON data transformation.\n","n":0.167}}},{"i":93,"$":{"0":{"v":"Multiple Requests","n":0.707},"1":{"v":"\nFor performing multiple concurrent requests:\n\n```js\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });\n```\n","n":0.196}}},{"i":94,"$":{"0":{"v":"Methods","n":1},"1":{"v":"\nThe methods available are:\n\n1. Default: `axios.request(config)`\n2. GET: `axios.get(url[, config])`\n3. DELETE: `axios.delete(url[, config])`\n4. HEAD: `axios.head(url[, config])`\n5. OPTIONS: `axios.options(url[, config])`\n6. POST: `axios.post(url[, data[, config]])`\n7. PUT: `axios.put(url[, data[, config]])`\n8. PATCH: `axios.patch(url[, data[, config]])`\n","n":0.183}}},{"i":95,"$":{"0":{"v":"POST","n":1},"1":{"v":"\nTo make a POST request in axios, we use the post method.\n\n```js\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n","n":0.189}}},{"i":96,"$":{"0":{"v":"GET","n":1},"1":{"v":"\nTo make a GET request, we use the `get()` method.\n\n```js\nconst axios = require('axios');\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });  \n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n","n":0.096}}},{"i":97,"$":{"0":{"v":"Default","n":1},"1":{"v":"\nYou can make requests in axios in the following way:\n\n```js\nconst { data } = await axios(url, {\n  headers: { Accept: 'application/json' },\n});\n```\n","n":0.213}}},{"i":98,"$":{"0":{"v":"Request Config","n":0.707},"1":{"v":"\nThese are the configuration options while making the default axios call. In this case, the `url` is necessary, however if no method is specified, the default method used would be GET.\n\n```json\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  // NOTE: params that are null or undefined are not rendered in the URL.\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional function in charge of serializing `params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function (params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE', and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 5, // default\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n}\n```\n","n":0.03}}},{"i":99,"$":{"0":{"v":"Headers","n":1},"1":{"v":"\nTo pass in the headers with Axios:\n\n- GET Request: The second argument is the headers.\n\n```js\naxios.get(url, {})\n```\n\n- POST Request: The third argument alongwith the data is the header.\n\n```js\naxios.post(url,{data},{})\n```\n\nOne small example would be:\n\n```js\nconst { data } = await axios.get(url, {\n        headers: { Accept: 'application/json' },\n      });\n```\n","n":0.151}}},{"i":100,"$":{"0":{"v":"Global Config","n":0.707},"1":{"v":"\nYou can specify some global configurations which the Axios API's will use throughout it's application. However, if there's a config that you don't want all the API's to use, you can use a [[Custom Instance|cs.webdev.frontend.language.js.tools.axios.custom-instance]] instead.\n","n":0.167}}},{"i":101,"$":{"0":{"v":"Error Handling","n":0.707},"1":{"v":"\nIn contrast to `fetch` and `XMLHttpRequest`, Axios treats all errors as errors and not just network errors.\n\nSince Axios is a promise based HTTP client, it has a `catch` method which is called when the promise is rejected.\n\n```js\naxios.get('https://api.github.com/users/michaelficarra')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n","n":0.146}}},{"i":102,"$":{"0":{"v":"Custom Instance","n":0.707}}},{"i":103,"$":{"0":{"v":"Axios Promises","n":0.707},"1":{"v":"\nOnce an HTTP request is made, it returns a promise that's either fulfilled or rejected as per the response sent by the server.\nIf the promise is fulfilled, the first argument of `then()` will be called; if the promise is rejected, the second argument will be called.\nAccording to the documentation, the fulfillment value is an object containing the following information:\n\n```json\n    { \n        // `data` is the response that was provided by the server \n        data: {}, \n        // `status` is the HTTP status code from the server response \n        status: 200, \n        // `statusText` is the HTTP status message from the server response \n        statusText: 'OK', \n        // `headers` the headers that the server responded with \n        // All header names are lower cased \n        headers: {}, \n        // `config` is the config that was provided to `axios` for the request \n        config: {}, \n        // `request` is the request that generated this response \n        // It is the last ClientRequest instance in node.js (in redirects) \n        // and an XMLHttpRequest instance the browser \n        request: {} \n    }\n```\n","n":0.075}}},{"i":104,"$":{"0":{"v":"Testing","n":1},"1":{"v":"\nWhen testing any application, you want to be confident that your applications are 100% testing and each of the components is working perfectly.\n\nA tip, when you're looking at any component you need to test, take a step back and think, if I were a manual tester, how would I test this? And then make your tests do the thing that you'd manually test.\n\n## Why should you test?\n\n1. Check whether application behaves as expected.\n2. Safeguard against unwated behaviour when changes are made.\n3. Automated and thus efficient on the long term.\n\n## What to test?\n\nHave a test priority:\n\n1. High value features.\n2. Edge cases in high value features.\n3. Things that are easy to break.\n","n":0.095}}},{"i":105,"$":{"0":{"v":"Types","n":1}}},{"i":106,"$":{"0":{"v":"Unit Tests","n":0.707},"1":{"v":"\nTesting a very small part of the code and in terms of functional programming, that would be to test a function. It tests a single component of your application in isolation.\n","n":0.18}}},{"i":107,"$":{"0":{"v":"Integration Tests","n":0.707},"1":{"v":"\nTesting multiple units in your application are working correctly together i.e. essentially combining unit tests into one larger test.\n","n":0.229}}},{"i":108,"$":{"0":{"v":"End to End Tests","n":0.5},"1":{"v":"\nTesting from one end i.e. from the frontend, all the way to another end i.e. the backend. This is essentially mimicking, how a user would use your application in the browser.\n","n":0.18}}},{"i":109,"$":{"0":{"v":"Tools","n":1}}},{"i":110,"$":{"0":{"v":"Jest","n":1},"1":{"v":"\nIt is a testing framework used to test JavaScript applications.\n\nWhen we run jest, it looks for the files with structure `*.test.js` and executes the tests inside of those files.\n\nTests have to be inside of a test block like `it` or `test` etc.\n","n":0.154}}},{"i":111,"$":{"0":{"v":"Test Suite","n":0.707},"1":{"v":"\n`describe` can be used to group test blocks together. It can be considered as a test suite.\n\n```js\ndescribe(\"example tests\", () => {\n    it('should add 1 + 2 to equal 3', () => {\n        const result = sum(1, 2);\n        expect(result).toBe(7);\n    });\n\n    it(\"object assignment\", () => {\n        const obj = {}\n        expect(obj).toEqual({});\n    })\n\n});\n```\n","n":0.141}}},{"i":112,"$":{"0":{"v":"Test Block","n":0.707},"1":{"v":"\nTests have to be inside of a test block like `it` or `test` etc.\n\n```js\nit('should add 1 + 2 to equal 3', () => {\n    const result = sum(1, 2);\n    expect(result).toBe(7);\n});\n```\n","n":0.183}}},{"i":113,"$":{"0":{"v":"it","n":1},"1":{"v":"\n```js\nit('should add 1 + 2 to equal 3', () => {\n\n})\n```\n\nThe first argument is the name of the test and the second one is the callback containing the logic to test.\n","n":0.18}}},{"i":114,"$":{"0":{"v":"only","n":1},"1":{"v":"\nIf you want to execute only one test inside a paticular test file, you should use `it.only`.\n\n```js\nlet animals = [];\n\ndescribe('animals array', () => {\n    beforeEach(() => {\n        animals = ['elephant', 'lion', 'tiger', 'bear', 'zebra', 'giraffe', 'panda'];\n    })\n    // All will be skipped\n    it('should add animal to the end of the array', () => {\n        animals.push('penguin');\n        expect(animals[animals.length - 1]).toBe('penguin');\n    })\n\n    it('should add animal to the beginning of the array', () => {\n        animals.unshift('monkey');\n        expect(animals[0]).toBe('monkey');\n    })\n\n    it('should have initial length of 7', () => {\n        expect(animals.length).toBe(7);\n    })\n})\n\ndescribe('testing something else', () => {\n    // Will be executed\n    it.only('should return the correct value', () => {\n        expect(true).toBe(true);\n    })\n})\n```\n","n":0.098}}},{"i":115,"$":{"0":{"v":"Setup and Teardown","n":0.577},"1":{"v":"\nConsider the following test cases:\n\n```js\nlet animals = ['elephant', 'lion', 'tiger', 'bear', 'zebra', 'giraffe', 'panda'];\n\ndescribe('animals array', () => {\n    it('should add animal to the end of the array', () => {\n        animals.push('penguin');\n        expect(animals[animals.length - 1]).toBe('penguin');\n    })\n\n    it('should add animal to the beginning of the array', () => {\n        animals.unshift('monkey');\n        expect(animals[0]).toBe('monkey');\n    })\n\n    it('should have initial length of 7', () => {\n        expect(animals.length).toBe(7);\n    })\n})\n```\n\nThe 3rd test case would fail as the tests before that are modifying the `animals` array. To avoid this, we need to reinitialize the array back to it's original state. However, we shouldn't reinitialize the array in each one of the methods as we're repeating code.\n\nHence we use setup (`beforeAll`, `beforeEach` etc.) or teardown (`afterAll`, `afterEach` etc.) methods to resolve this.\n","n":0.091}}},{"i":116,"$":{"0":{"v":"Specific setup and teardown for each block","n":0.378},"1":{"v":"\nIf you want to run `beforeAll` or `afterAll` only for one `describe` block, do the following:\n\n```js\nlet animals = [];\n\n\ndescribe('animals array', () => {\n    beforeEach(() => {\n        animals = ['elephant', 'lion', 'tiger', 'bear', 'zebra', 'giraffe', 'panda'];\n    })\n\n    it('should add animal to the end of the array', () => {\n        animals.push('penguin');\n        expect(animals[animals.length - 1]).toBe('penguin');\n    })\n\n    it('should add animal to the beginning of the array', () => {\n        animals.unshift('monkey');\n        expect(animals[0]).toBe('monkey');\n    })\n\n    it('should have initial length of 7', () => {\n        expect(animals.length).toBe(7);\n    })\n})\n\ndescribe('testing something else', () => {\n    it('should return the correct value', () => {\n        expect(true).toBe(true);\n    })\n})\n```\n","n":0.103}}},{"i":117,"$":{"0":{"v":"beforeEach","n":1},"1":{"v":"\n```js\nlet animals = ['elephant', 'lion', 'tiger', 'bear', 'zebra', 'giraffe', 'panda'];\n\nbeforeEach(() => {\n    animals = ['elephant', 'lion', 'tiger', 'bear', 'zebra', 'giraffe', 'panda'];\n})\n\ndescribe('animals array', () => {\n    it('should add animal to the end of the array', () => {\n        animals.push('penguin');\n        expect(animals[animals.length - 1]).toBe('penguin');\n    })\n\n    it('should add animal to the beginning of the array', () => {\n        animals.unshift('monkey');\n        expect(animals[0]).toBe('monkey');\n    })\n\n    it('should have initial length of 7', () => {\n        expect(animals.length).toBe(7);\n    })\n})\n```\n\nTo run some statement before each one of the test cases, we use the `beforeEach` function.\n","n":0.11}}},{"i":118,"$":{"0":{"v":"beforeAll","n":1},"1":{"v":"\n```js\nlet animals = [];\n\n\nbeforeAll(() => {\n    animals = ['elephant', 'lion', 'tiger', 'bear', 'zebra', 'giraffe', 'panda']\n})\n\nafterEach(() => {\n    animals = ['elephant', 'lion', 'tiger', 'bear', 'zebra', 'giraffe', 'panda'];\n})\n\ndescribe('animals array', () => {\n    it('should add animal to the end of the array', () => {\n        animals.push('penguin');\n        expect(animals[animals.length - 1]).toBe('penguin');\n    })\n\n    it('should add animal to the beginning of the array', () => {\n        animals.unshift('monkey');\n        expect(animals[0]).toBe('monkey');\n    })\n\n    it('should have initial length of 7', () => {\n        expect(animals.length).toBe(7);\n    })\n})\n```\n\nBefore any of the test cases are executed, `beforeAll` will get executed only once.\n","n":0.108}}},{"i":119,"$":{"0":{"v":"afterEach","n":1},"1":{"v":"\n```js\nlet animals = ['elephant', 'lion', 'tiger', 'bear', 'zebra', 'giraffe', 'panda'];\n\n\nafterEach(() => {\n    animals = ['elephant', 'lion', 'tiger', 'bear', 'zebra', 'giraffe', 'panda'];\n})\n\ndescribe('animals array', () => {\n    it('should add animal to the end of the array', () => {\n        animals.push('penguin');\n        expect(animals[animals.length - 1]).toBe('penguin');\n    })\n\n    it('should add animal to the beginning of the array', () => {\n        animals.unshift('monkey');\n        expect(animals[0]).toBe('monkey');\n    })\n\n    it('should have initial length of 7', () => {\n        expect(animals.length).toBe(7);\n    })\n})\n```\n\nThis will run the statements inside the `afterEach` function after each test case is executed.\n","n":0.11}}},{"i":120,"$":{"0":{"v":"afterAll","n":1},"1":{"v":"\n```js\nlet animals = [];\n\n\nbeforeAll(() => {\n    animals = ['elephant', 'lion', 'tiger', 'bear', 'zebra', 'giraffe', 'panda']\n})\n\nafterEach(() => {\n    animals = ['elephant', 'lion', 'tiger', 'bear', 'zebra', 'giraffe', 'panda'];\n})\n\nafterAll(() => {\n    animals = [];\n})\n\ndescribe('animals array', () => {\n    it('should add animal to the end of the array', () => {\n        animals.push('penguin');\n        expect(animals[animals.length - 1]).toBe('penguin');\n    })\n\n    it('should add animal to the beginning of the array', () => {\n        animals.unshift('monkey');\n        expect(animals[0]).toBe('monkey');\n    })\n\n    it('should have initial length of 7', () => {\n        expect(animals.length).toBe(7);\n    })\n})\n```\n\nAfter all the test cases are executed, `afterAll` will get executed only once.\n","n":0.105}}},{"i":121,"$":{"0":{"v":"Mock","n":1},"1":{"v":"\nImagine the following function:\n\n```js\nconst fetchData = async (id) => {\n    const results = await axios.get(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    ... // validation and other processes\n    return results.data\n}\n```\n\nLet's assume the function consists of a lot of validation and other process. In this case, we're banking on the fact that the API call will get resolved successfuly. The API call can fail due to various reasons, e.g. server failure etc.\n\nHowever, even if the API call fails, we need to test if our function is correctly written.\n\nSo here, instead of making an actual API call, we will mock the API call and stub a function (or mock) that will always be successful and return us a data object. In this case, we can test our function implementation regardless of the API call.\n","n":0.089}}},{"i":122,"$":{"0":{"v":"Mock Function","n":0.707},"1":{"v":"\nMock functions allow you:\n\n1. To test the links between code by erasing the implementation details of a function.\n2. Capturing the calls and the parameters passed to the function in those calls.\n3. Capturing instances of the the constructor functions when they're instantiated with the `new` keyword.\n4. Allow test-time configuration of return values.\n\nWe can create mock functions in two ways:\n\n1. Either by creating a mock function to use in test code.\n2. Writing a `manual mock` to override a module dependency.\n\ne.g.\n\n```js\nconst forEach = (items, callback) => {\n    for (let i = 0; i < items.length; i++) {\n        callback(items[i]);\n    }\n}\n\nconst mockCallback = jest.fn(x => 42 + x);\n\ndescribe('mock callback', () => {\n\n    beforeEach(() => {\n        forEach([0, 1], mockCallback);\n    })\n\n\n    it(\"The mock function is called twice\", () => {\n        expect(mockCallback.mock.calls.length).toBe(2);\n    })\n\n\n    it(\"The first argument of the first call to the function was 0\", () => {\n        expect(mockCallback.mock.calls[0][0]).toBe(0);\n    })\n\n    it(\"The first argument of the second call to the function was 1\", () => {\n        expect(mockCallback.mock.calls[1][0]).toBe(1);\n    })\n\n    it(\"The return value of the first call to the function was 42\", () => {\n        expect(mockCallback.mock.results[0].value).toBe(42);\n    })\n\n    it(\"The return value of the first call to the function was 43\", () => {\n        expect(mockCallback.mock.results[1].value).toBe(43);\n    })\n})\n```\n\nIn case you don't want any logic for a mock function but just have a function that returns some value, you can do the following:\n\n```js\nit('mock return', () => {\n    const mock = jest.fn();\n    mock.mockReturnValueOnce(true);\n    const results = mock();\n    expect(results).toBe(true);\n})\n```\n","n":0.066}}},{"i":123,"$":{"0":{"v":"Spy","n":1},"1":{"v":"\nConsider the following:\n\n```js\nconst axios = require('axios')\n\nconst fetchData = async (id) => {\n    const results = await axios.get(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    return results.data\n}\n```\n\nHere we don't want to actually make an HTTP `axios.get` request. So we can `spyOn` the axios module. You can consider spying on something as a mock i.e. instead of the spied function having an implementation, we're going to spy on it and return the mock value that we want.\n\n```js\nit('mock axios', async () => {\n    // 1st parameter is the module we want to spy on\n    // 2nd parameter is what method do we want to spy on in the module\n    jest.spyOn(axios, 'get').mockReturnValueOnce({\n        data: {\n            id: 1,\n            todo: 'Get 1M subscribers'\n        }\n    });\n    const results = await fetchData(1);\n\n    expect(results.todo).toBe('Get 1M subscribers');\n})\n```\n","n":0.092}}},{"i":124,"$":{"0":{"v":"Return Value","n":0.707},"1":{"v":"\nYou can specify the return value of a mock function as below:\n\n```js\nit('mock return', () => {\n    const mock = jest.fn();\n    mock.mockReturnValueOnce(true);\n    const results = mock();\n    expect(results).toBe(true);\n})\n```\n\nYou can also also inject multiple return values as the following.\n\n```js\nconst myMock = jest.fn();\nconsole.log(myMock());\n// > undefined\n\nmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);\n\nconsole.log(myMock(), myMock(), myMock(), myMock());\n// > 10, 'x', true, true\n```\n\nHere, the first call will return `10`, the next one will return `x` and then the next one and all other subsequent calls will return `true`.\n\nMock functions are also very effective in code that uses a functional continuation-passing style. Code written in this style helps avoid the need for complicated stubs that recreate the behavior of the real component they're standing in for, in favor of injecting values directly into the test right before they're used.\n\n```js\nconst filterTestFn = jest.fn();\n\n// Make the mock return `true` for the first call,\n// and `false` for the second call\nfilterTestFn.mockReturnValueOnce(true).mockReturnValueOnce(false);\n\nconst result = [11, 12].filter(num => filterTestFn(num));\n\nconsole.log(result);\n// > [11]\nconsole.log(filterTestFn.mock.calls[0][0]); // 11\nconsole.log(filterTestFn.mock.calls[1][0]); // 12\n```\n\nMost real-world examples actually involve getting ahold of a mock function on a dependent component and configuring that, but the technique is the same. In these cases, try to avoid the temptation to implement logic inside of any function that's not directly being tested.\n","n":0.071}}},{"i":125,"$":{"0":{"v":".mock Property","n":0.707},"1":{"v":"\nAll mock functions have a `.mock` property which is where the data about how the function has been called, it's return values are stored.\n\nThe `.mock` property also tracks the value of `this` for each call, so it's possible to inspect `this` as well.\n\n```js\nconst myMock1 = jest.fn();\nconst a = new myMock1();\nconsole.log(myMock1.mock.instances);\n// > [ <a> ]\n\nconst myMock2 = jest.fn();\nconst b = {};\nconst bound = myMock2.bind(b);\nbound();\nconsole.log(myMock2.mock.contexts);\n// > [ <b> ]\n```\n\nThe mock members are quite useful in tests to assert:\n\n1. How the functions get called?\n2. How the functions get instantiated?\n3. What they returned?\n\ne.g.\n\n```js\n// The function was called exactly once\nexpect(someMockFunction.mock.calls.length).toBe(1);\n\n// The first arg of the first call to the function was 'first arg'\n// First parameter signifies the first call and the second parameter signifies the 1st argument in that call\nexpect(someMockFunction.mock.calls[0][0]).toBe('first arg');\n\n// The second arg of the first call to the function was 'second arg'\nexpect(someMockFunction.mock.calls[0][1]).toBe('second arg');\n\n// The return value of the first call to the function was 'return value'\nexpect(someMockFunction.mock.results[0].value).toBe('return value');\n\n// The function was called with a certain `this` context: the `element` object.\nexpect(someMockFunction.mock.contexts[0]).toBe(element);\n\n// This function was instantiated exactly twice\nexpect(someMockFunction.mock.instances.length).toBe(2);\n\n// The object returned by the first instantiation of this function\n// had a `name` property whose value was set to 'test'\nexpect(someMockFunction.mock.instances[0].name).toEqual('test');\n\n// The first argument of the last call to the function was 'test'\nexpect(someMockFunction.mock.lastCall[0]).toBe('test');\n```\n","n":0.07}}},{"i":126,"$":{"0":{"v":"Assertion","n":1},"1":{"v":"\nIt's a check that values meet certain conditions. This is what you put into the test cases (e.g. `expect` in Jest) which either turn out to be successful (green) or erroneous (red).\n","n":0.177}}},{"i":127,"$":{"0":{"v":"not","n":1},"1":{"v":"\nWe can use `.not` to flip the assertion i.e. it's the same as `!` operator e.g. `sum !== 3`.\n","n":0.229}}},{"i":128,"$":{"0":{"v":"Multiple Expects","n":0.707},"1":{"v":"\nIf you have multiple expects in one `it` or a `test` block, all of them need to pass in order for the test to pass.\n\nIt's better to have one expect statement inside one test block.\n","n":0.169}}},{"i":129,"$":{"0":{"v":"Matchers","n":1},"1":{"v":"\nUsed to match an assertion with some value etc. e.g. `toBe`.\n\n```js\nexpect(result).toBe(7);\n```\n\n### Reference\n\n[Matchers](https://jestjs.io/docs/expect)\n","n":0.289}}},{"i":130,"$":{"0":{"v":"Undefined","n":1},"1":{"v":"\nYou can check for `undefined` values with `toBeUndefined()`.\n","n":0.354}}},{"i":131,"$":{"0":{"v":"Truthy or Falsy","n":0.577},"1":{"v":"\nWe can use `toBeTruthy` or `toBeFalsy` for checking truthy or falsy values.\n","n":0.289}}},{"i":132,"$":{"0":{"v":"toBe Vs toEqual","n":0.577},"1":{"v":"\n```js\ndescribe(\"example tests\", () => {\n    // Fails as {} !== {}\n    it(\"object assignment 1\", () => {\n        const obj = {}\n        expect(obj).toBe({});\n    })\n    // Passes\n    it(\"object assignment 2\", () => {\n        const obj = {}\n        expect(obj).toEqual({});\n    })\n});\n```\n\n`toEqual` is used to compare equality of objects, arrays etc. whereas `toBe` can be used for primitives.\n","n":0.137}}},{"i":133,"$":{"0":{"v":"Strings","n":1},"1":{"v":"\n`toMatch`: To match a string to a regular expression or some value.\n","n":0.289}}},{"i":134,"$":{"0":{"v":"Numbers","n":1},"1":{"v":"\n`toBeGreaterThan`: To be greater than some specific number.\n\n`toBeGreaterThanOrEqual`: To be greater or equal to than some specific number.\n\n`toBe`: To be equal to a number.\n\n`toBeLessThan`: To be lesser than some specific number.\n\n`toBeLessThanOrEqual`: To be lesser or equal to than some specific number.\n\n## Decimals\n\n`toBeCloseTo`: To be really close to the actual answer. e.g. 0.28 and 0.29 isn't close to 0.3 but 0.2999999 is.\n","n":0.128}}},{"i":135,"$":{"0":{"v":"Null","n":1},"1":{"v":"\nYou can check for `null` values with `toBeNull()`.\n","n":0.354}}},{"i":136,"$":{"0":{"v":"Exceptions","n":1},"1":{"v":"\n`toThrow` or `toThrow(error)` or `toThrow(\"You're using the wrong JDK\")`: Expects a function or something to throw an error.\n","n":0.236}}},{"i":137,"$":{"0":{"v":"Arrays","n":1},"1":{"v":"\n`toContain`: If an array contains a value.\n","n":0.378}}},{"i":138,"$":{"0":{"v":"Async","n":1},"1":{"v":"\nTo test async functions:\n\n```js\nconst fetchData = require('./async')\n\nit('should return correct data', () => {\n    fetchData(1).then(data => {\n        expect(data.id).toEqual(1)\n    })\n})\n\nit('should return correct data', async () => {\n    const data = await fetchData(1)\n    expect(data.id).toEqual(1)\n})\n```\n","n":0.18}}},{"i":139,"$":{"0":{"v":"Network Requests","n":0.707}}},{"i":140,"$":{"0":{"v":"Why Is It Asynchronous?","n":0.5},"1":{"v":"\nWhen we make any request to the server, it basically takes sometime for us to receive the data as the data has to travel through vast distances of copper and fiber optic cables, not to mention the time it takes for the server to process as well. Even at the speed of light, it takes a request about 100 milliseconds to round trip from New York to Australia.\n\n**Might need a new note**:\n\nThe Fetch API The fetch API is the easiest way to make network requests in the browser. It uses a Promise API to handle the async request. Show More Notice how it uses a chained .then() to get the actual data. The first response parameter is the raw HTTP response, that includes the status code and headers.\n\n```js\n    fetch(url).then((response) => response.json())\n```\n\nOnce you have the response, there are a few options to get the response body – `response.json()` parses the body as JSON, `response.text()` parses it as text, and `response.arrayBuffer()` returns the raw bytes that came back.\n","n":0.078}}},{"i":141,"$":{"0":{"v":"JavaScript Frameworks","n":0.707}}},{"i":142,"$":{"0":{"v":"React","n":1},"1":{"v":"\nReact is a JavaScript Library for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications, as it is optimal for fetching rapidly changing data that needs to be recorded.\n\nIn React, we always need to remember that the DOM is the only way to interact with the user. React is a library that abstracts away the DOM from us, so we can focus on the business logic.\n","n":0.107}}},{"i":143,"$":{"0":{"v":"Tools","n":1}}},{"i":144,"$":{"0":{"v":"Formik","n":1},"1":{"v":"\nFormik is a library used to make creation of [[React Forms|cs.webdev.frontend.language.js.jsframework.react.forms]] easier.\n","n":0.289}}},{"i":145,"$":{"0":{"v":"Create React App","n":0.577}}},{"i":146,"$":{"0":{"v":"Why Use React?","n":0.577}}},{"i":147,"$":{"0":{"v":"Unidirectional Data Flow","n":0.577},"1":{"v":"\nAlso known as [[cs.webdev.frontend.language.js.jsframework.react.state-management.types-of-application-state.client-state.design.prop-drilling]] and done by lifting the state.\n","n":0.316}}},{"i":148,"$":{"0":{"v":"Composition","n":1},"1":{"v":"\nWe can compose functions together to form some value:\n\n```js\nfunction getProfilePic(username) {\n  return \"https://photo.fb.com/\" + username;\n}\n\nfunction getProfileLink(username) {\n  return \"https://www.fb.com/\" + username;\n}\n\nfunction getAvatarInfo(username) {\n  return {\n    pic: getProfilePic(username),\n    link: getProfileLink(username),\n  };\n}\n\ngetAvatarInfo(\"tylermcginnis\");\n```\n\nWe can use the same intuition i.e. composing functions together to get some UI:\n\n```jsx\nfunction ProfilePic (props) {\n  return (\n    <img src={'https://photo.fb.com/' + props.username'} />\n  )\n}\n\nfunction ProfileLink (props) {\n  return (\n    <a href={'https://www.fb.com/' + props.username}>\n      {props.username}\n    </a>\n  )\n}\n\nfunction Avatar (props) {\n  return (\n    <div>\n      <ProfilePic username={props.username} />\n      <ProfileLink username={props.username} />\n    </div>\n  )\n}\n\n\n<Avatar username=\"tylermcginnis\" />\n```\n\nThis is the foundation of React.\n\nThis is a language agnostic concept, so, the same intuition we have about building and composing functions together, can be directly applied to build and compose React components together.\n\nThis also brings the advantages of composition over inheritance into React.\n\nBecause of this, we also get a vibrant ecosystem of third-party components that can be reused in our applications.\n\nReact is like Legos for developers.\n","n":0.082}}},{"i":149,"$":{"0":{"v":"Test","n":1},"1":{"v":"\n## What to test?\n\nBasic React component testing:\n\n1. User interaction\n2. Conditional rendering\n3. Utils/Hooks\n","n":0.289}}},{"i":150,"$":{"0":{"v":"Tools","n":1}}},{"i":151,"$":{"0":{"v":"React Testing Library","n":0.577},"1":{"v":"\nReact Testing Library is built on top of [DOM Testing Library](https://testing-library.com/docs/dom-testing-library/intro/) which in turn is a part of the [`@testing-library`](https://testing-library.com/docs/) family of packages.\n\n## The Problem\n\nAs per it's guiding principle, you would want to write maintainable tests that give you confidence that your componenets are working for your users.\n\nTherefore, you would want your tests to avoid including implementation details, so, refactors of your components i.e. changes to implementation but not to the functionality, don't break the tests and slow you down.\n\n## The Solution\n\nThe core library i.e. DOM Testing library, is a light-weight solution for testing webpages by querying and interacting with the DOM nodes (whether simultaed  with JSDOM/[[cs.webdev.frontend.language.js.testing.tools.jest]] or in the browser).\n\nIt provides utilities for interacting/querying the DOM nodes in a way that's similar to how user finds elements on the web page. In this way, the framework ensures confidence that our application will work when a real user interacts with it as our tests will mimic the way a user interacts with our application.\n\n## What this library is not?\n\n1. A test runner or framework.\n2. Specific to a testing framework.\n\nDOM Testing Library works with any environment that provides DOM APIs, such as Jest, Mocha + JSDOM, or a real browser.\n\n## What you should avoid with Testing Library?\n\nTesting Library encourages you to avoid testing implementation details like the internals of a component you're testing (though it's still possible).\n\nThe Guiding Principles of this library emphasize a focus on tests that closely resemble how our web pages are interacted by the users.\n\nYou may want to avoid the following implementation details:\n\n1. Internal state of a component\n2. Internal methods of a component\n3. Lifecycle methods of a component\n4. Child components\n","n":0.061}}},{"i":152,"$":{"0":{"v":"Finding Elements","n":0.707}}},{"i":153,"$":{"0":{"v":"Query","n":1},"1":{"v":"\nIt will not error out if the match isn't found.\n\n```js\n    it('should render same text passed into title prop when searched by text', () => {\n        render(<Header title='My Header' />)\n        const headingElement = screen.queryByText(/dog/i)\n        expect(headingElement).not.toBeInTheDocument()\n    })\n```\n","n":0.169}}},{"i":154,"$":{"0":{"v":"Get","n":1},"1":{"v":"\nIt will error out causing the tests to fail if the match isn't found.\n\n`getByText`: Find by text\n\n```js\nit('should render same text passed into title prop when searched by text', () => {\n    render(<Header title='My Header' />)\n    const headingElement = screen.getByText(/my header/i)\n    expect(headingElement).toBeInTheDocument()\n})\n```\n\n`getByRole`: Find by role e.g. button, header, paragraph etc. Press `ctrl+space` to find all the permissible values.\n\n```js\nit('should render same text passed into title prop when searched by role', () => {\n    render(<Header title='My Header' />)\n    const headingElement = screen.getByRole(\"heading\")\n    expect(headingElement).toBeInTheDocument()\n})\n```\n\nIf this returns multiple headers, it will fail the test. To make sure that doesn't happen, we can do a search on the contents of the element as follows:\n\n```js\nit('should render same text passed into title prop when searched by role', () => {\n    render(<Header title='My Header' />)\n    const headingElement = screen.getByRole(\"heading\", { name: \"My Header\" })\n    expect(headingElement).toBeInTheDocument()\n})\n```\n\nYou can use a semantic queries also:\n\n```html\n    <>\n        <h1 className=\"header\" title=\"Header\">{title}</h1>\n    </>\n```\n\n```js\nit('should render same text passed into title prop when searched by role', () => {\n    render(<Header title='My Header' />)\n    const headingElement = screen.getByTitle(\"Header\")\n    expect(headingElement).toBeInTheDocument()\n})\n```\n\n`getAllByRole`:\n\n```js\n    it('should render all headers when searched by role', () => {\n        render(<Header title='My Header' />)\n        const headingElement = screen.getAllByRole(\"heading\")\n        expect(headingElement.length).toBe(2)\n    })\n```\n","n":0.072}}},{"i":155,"$":{"0":{"v":"Find","n":1},"1":{"v":"\n```js\nit('should render same text passed into title prop when searched by text', async () => {\n        render(<Header title='My Header' />)\n        const headingElement = await screen.findByText(/my header/i)\n        expect(headingElement).toBeInTheDocument()\n})\n```\n","n":0.192}}},{"i":156,"$":{"0":{"v":"findBy vs getBy vs queryBy","n":0.447},"1":{"v":"\n![Differences](/assets/images/2022-07-26-10-24-14.png)\n\n- `findBy`, `getBy`, `queryBy` are used to fetch only one element but `findAllBy`, `getAllBy`, `queryAllBy` return an array of elements.\n- `getBy` and `getAllBy` will throw an error if no match is found and they can't be used asynchronously.\n- `findBy` and `findAllBy` is similar to it's `get` counterpart, however, it can be used asynchronously. What that means is, if we have an element that renders whenever there's a successful API call, we need to use `find`.\n- `queryBy` and `queryAllBy` is similar to it's `get` counterpart with the only difference that, when we don't get a match, we don't get an error.\n","n":0.1}}},{"i":157,"$":{"0":{"v":"Elements with Router","n":0.577},"1":{"v":"\nImagine the following component:\n\n```jsx\nfunction TodoFooter({\n    numberOfIncompleteTasks\n}) {\n    return (\n        <div className=\"todo-footer\">\n            <p>{numberOfIncompleteTasks} {numberOfIncompleteTasks === 1 ? \"task\" : \"tasks\"} left</p>\n            <Link to=\"/followers\">Followers</Link>\n        </div>\n    )\n}\n```\n\nIf we write the tests like this:\n\n```js\nit('should render the correct amount of incomplete tasks', () => {\n    render(<TodoFooter numberOfIncompleteTasks={5} />)\n    const paragraphElement = screen.getByText(/5 tasks left/i)\n    expect(paragraphElement).toBeInTheDocument()\n})\n```\n\nThis test will fail as we have a `Link` element inside the `TodoFooter` component and all the `Link` components should lie within a `<BrowserRouter>`. As we are rendering the component in a standalone way, this doesn't happen. To fix this, we need to wrap our `TodoFooter` in a `BrowserRouter` component as follows:\n\n```js\nconst MockTodoFooter = ({ numberOfIncompleteTasks }) => {\n    return (\n        <BrowserRouter>\n            <TodoFooter numberOfIncompleteTasks={numberOfIncompleteTasks} />\n        </BrowserRouter>\n    )\n}\n\nit('should render the correct amount of incomplete tasks', () => {\n    render(<MockTodoFooter numberOfIncompleteTasks={5} />)\n    const paragraphElement = screen.getByText(/5 tasks left/i)\n    expect(paragraphElement).toBeInTheDocument()\n})\n```\n","n":0.086}}},{"i":158,"$":{"0":{"v":"Test Structure","n":0.707},"1":{"v":"\nA typical React test block structure looks like:\n\n1. Render a component we want to test.\n2. Find elements we want to interact with.\n3. Interact with those elements.\n4. Assert that the results are as expected.\n","n":0.174}}},{"i":159,"$":{"0":{"v":"Test Block","n":0.707},"1":{"v":"\n```js\ntest('renders learn react link', () => {\n  render(<App />);\n  const linkElement = screen.getByText(/learn react/i);\n  expect(linkElement).toBeInTheDocument();\n});\n```\n\nSimilar to [[cs.webdev.frontend.language.js.testing.tools.jest.test-block]] in [[cs.webdev.frontend.language.js.testing.tools.jest]]. We can either use `it` or `test` in this case.\n","n":0.186}}},{"i":160,"$":{"0":{"v":"Describe","n":1},"1":{"v":"\nSimilar to [[cs.webdev.frontend.language.js.testing.tools.jest.test-suite]] from Jest.\n\nUsed to group multiple related test blocks into a single group.\n\nWe can nest multiple `describe` blocks into one another.\n\n```js\ndescribe('Header', () => {\n    it('should render same text passed into title prop when searched by text', () => {\n        render(<Header title='My Header' />)\n        const headingElement = screen.getByText(/my header/i)\n        expect(headingElement).toBeInTheDocument()\n    })\n})\n```\n\nor\n\n```js\nconst MockTodoFooter = ({ numberOfIncompleteTasks }) => {\n    return (\n        <BrowserRouter>\n            <TodoFooter numberOfIncompleteTasks={numberOfIncompleteTasks} />\n        </BrowserRouter>\n    )\n}\n\ndescribe(\"TodoFooter\", () => {\n    it('should render the correct amount of incomplete tasks', () => {\n        render(<MockTodoFooter numberOfIncompleteTasks={5} />)\n        const paragraphElement = screen.getByText(/5 tasks left/i)\n        expect(paragraphElement).toBeInTheDocument()\n    })\n\n    it('should render \"task\" when the number of incomplete tasks is one', () => {\n        render(<MockTodoFooter numberOfIncompleteTasks={1} />)\n        const paragraphElement = screen.getByText(/1 task left/i)\n        expect(paragraphElement).toBeInTheDocument()\n    })\n})\n```\n","n":0.092}}},{"i":161,"$":{"0":{"v":"Assertions","n":1},"1":{"v":"\nSimilar to [[cs.webdev.frontend.language.js.testing.tools.jest.assertion]] in Jest.\n\nSome examples:\n\n```js\nconst MockTodoFooter = ({ numberOfIncompleteTasks }) => {\n    return (\n        <BrowserRouter>\n            <TodoFooter numberOfIncompleteTasks={numberOfIncompleteTasks} />\n        </BrowserRouter>\n    )\n}\n\nit('should render the correct amount of incomplete tasks', () => {\n    render(<MockTodoFooter numberOfIncompleteTasks={5} />)\n    const paragraphElement = screen.getByText(/5 tasks left/i)\n    expect(paragraphElement).toBeInTheDocument()\n})\n\nit('should render \"task\" when the number of incomplete tasks is one - 1', () => {\n    render(<MockTodoFooter numberOfIncompleteTasks={1} />)\n    const paragraphElement = screen.getByText(/1 task left/i)\n    expect(paragraphElement).toBeInTheDocument()\n})\n\nit('should render \"task\" when the number of incomplete tasks is one - 2', () => {\n    render(<MockTodoFooter numberOfIncompleteTasks={1} />)\n    const paragraphElement = screen.getByText(/1 task left/i)\n    // The element is actually visible to the end user. So making the opacity to 0 of an element will render the component not visible to the end user. This is just one of the ways to make a component invisible.\n    expect(paragraphElement).toBeVisible()\n})\n\nit('should render \"task\" when the number of incomplete tasks is one - 3', () => {\n    render(<MockTodoFooter numberOfIncompleteTasks={1} />)\n    const paragraphElement = screen.getByText(/1 task left/i)\n    expect(paragraphElement).toBeTruthy();\n})\n\nit('should render \"task\" when the number of incomplete tasks is one - 4', () => {\n    render(<MockTodoFooter numberOfIncompleteTasks={1} />)\n    const paragraphElement = screen.getByText(/1 task left/i)\n    expect(paragraphElement).toContainHTML('p');\n})\n\nit('should render \"task\" when the number of incomplete tasks is one - 5', () => {\n    render(<MockTodoFooter numberOfIncompleteTasks={1} />)\n    const paragraphElement = screen.getByText(/1 task left/i)\n    expect(paragraphElement).toHaveTextContent('1 task left');\n})\n\nit('should render \"task\" when the number of incomplete tasks is one - 6', () => {\n    render(<MockTodoFooter numberOfIncompleteTasks={1} />)\n    const paragraphElement = screen.getByText(/1 task left/i)\n    // `not` negates the assertion\n    expect(paragraphElement).not.toBeFalsy();\n})\n\nit('should render \"task\" when the number of incomplete tasks is one - 7', () => {\n    render(<MockTodoFooter numberOfIncompleteTasks={1} />)\n    const paragraphElement = screen.getByText(/1 task left/i)\n    // We get an element which has some attributes that we can access\n    expect(paragraphElement.textContent).toHaveTextContent('1 task left');\n})\n```\n","n":0.06}}},{"i":162,"$":{"0":{"v":"Setup and Teardown","n":0.577},"1":{"v":"\nSimilar to [[cs.webdev.frontend.language.js.testing.tools.jest.setup-teardown]].\n\n```js\nconst MockFollowersList = () => {\n    return (\n        <BrowserRouter>\n            <FollowersList />\n        </BrowserRouter>\n    )\n}\n\ndescribe('FollowersList', () => {\n    // Used for initializations\n    beforeEach(() => {\n        console.log('Running Before Each Test')\n    })\n\n    beforeAll(() => {\n        console.log('Running Once Before All Tests')\n    })\n\n    // Used for cleanups\n    afterEach(() => {\n        console.log('Running After Each Test')\n    })\n\n    afterAll(() => {\n        console.log('Running Once After All Tests')\n    })\n\n    it('should render the followers list card', async () => {\n        render(<MockFollowersList />)\n        const followerDivElement = await screen.findByTestId('follower-item-0')\n        expect(followerDivElement).toBeInTheDocument()\n    })\n\n    it('should render the followers list card 2', async () => {\n        render(<MockFollowersList />)\n        const followerDivElement = await screen.findByTestId('follower-item-0')\n        expect(followerDivElement).toBeInTheDocument()\n    })\n\n    it('should render the followers list card 3', async () => {\n        render(<MockFollowersList />)\n        const followerDivElement = await screen.findByTestId('follower-item-0')\n        expect(followerDivElement).toBeInTheDocument()\n    })\n})\n```\n","n":0.092}}},{"i":163,"$":{"0":{"v":"Rendering Elements on Virtual DOM","n":0.447},"1":{"v":"\n`render` is used to render a React element into the virtual DOM:\n\n```js\nrender(<TransactionCreateStepTwo sender={{ id: 5 }} receiver={{ id: 5 }} />);\n```\n\nIt renders the element on a `screen` which can be used to interact with the virtual DOM tree for the corresponding component.\n","n":0.154}}},{"i":164,"$":{"0":{"v":"Mock","n":1},"1":{"v":"\nReact Testing Library also uses [[cs.webdev.frontend.language.js.testing.tools.jest.mock]] functions from jest.\n\n```js\nconst mockedSetTodo = jest.fn()\n\ndescribe('AddInput', () => {\n    it('should render input element', () => {\n        render(\n            <AddInput\n                todos={[]}\n                // We don't care about the setTodos function as we are just trying to render the component\n                setTodos={mockedSetTodo}\n            />\n        )\n        const inputElement = screen.getByPlaceholderText(/Add a new task here.../i)\n        expect(inputElement).toBeInTheDocument()\n    })\n})\n```\n","n":0.135}}},{"i":165,"$":{"0":{"v":"Integration Tests","n":0.707},"1":{"v":"\nTesting different units/components together.\n\n```js\nconst MockTodo = () => {\n    return (\n        <BrowserRouter>\n            <Todo />\n        </BrowserRouter>\n    )\n}\n\nconst addTask = (tasks) => {\n    const inputElement = screen.getByPlaceholderText(/Add a new task here.../i)\n    const buttonElement = screen.getByRole('button', { name: /add/i })\n    tasks.forEach(task => {\n        fireEvent.change(inputElement, { target: { value: task } })\n        fireEvent.click(buttonElement)\n    });\n}\n\ndescribe('Header', () => {\n    it('should render same text passed into title prop', () => {\n        render(<MockTodo />)\n        addTask(['Go Grocery Shopping'])\n        const divElement = screen.getByText(/Go grocery shopping/i)\n        expect(divElement).toBeInTheDocument()\n    })\n\n    it('should render multiple items', () => {\n        render(<MockTodo />)\n        addTask(['Go Grocery Shopping', 'Pet My cat', 'Go To The Gym'])\n        const divElements = screen.getAllByTestId('task-container')\n        expect(divElements.length).toBe(3)\n    })\n\n    it('task should not have completed class when initially rendered', () => {\n        render(<MockTodo />)\n        addTask(['Go Grocery Shopping'])\n        const divElement = screen.getByTestId('task-container')\n        expect(divElement).not.toHaveClass(\"todo-item-active\")\n    })\n\n    it('task should have completed class when clicked', () => {\n        render(<MockTodo />)\n        addTask(['Go Grocery Shopping'])\n        const divElement = screen.getByTestId('task-container')\n        fireEvent.click(divElement)\n        expect(divElement).toHaveClass(\"todo-item-active\")\n    })\n})\n```\n","n":0.082}}},{"i":166,"$":{"0":{"v":"Guiding Principle","n":0.707},"1":{"v":"\nThe more our tests resmble the way our software is used, the more confidence they'll give.\n\nUtilities are included in this project based on the following guiding principles:\n\n1. If it relates to rendering components, then it should deal with DOM nodes rather than component instances, and it should not encourage dealing with component instances.\n2. It should be generally useful for testing the application components in the way the user would use it. We are making some trade-offs here because we're using a computer and often a simulated browser environment, but in general, utilities should encourage tests that use the components the way they're intended to be used.\n3. Utility implementations and APIs should be simple and flexible.\n","n":0.093}}},{"i":167,"$":{"0":{"v":"Priority","n":1},"1":{"v":"\n![Priority](/assets/images/2022-07-26-10-33-49.png)\n\nAs per guiding principles, we want our tests to mimic how a user interacts with our web pages. So for that we would be using attributes like that.\n","n":0.189}}},{"i":168,"$":{"0":{"v":"Element Interaction","n":0.707},"1":{"v":"\nTo make interactions with our elements, we use the `fireEvent` method from React Testing Library. #todo\n\n```js\nit('should be able to type into the input element', () => {\n        render(\n            <AddInput\n                todos={[]}\n                setTodos={mockedSetTodo}\n            />\n        )\n        const inputElement = screen.getByPlaceholderText(/Add a new task here.../i)\n        // Adding some value into an input text box\n        // First parameter is the target element in which we want to fire an event on\n        // Second is the value => Looks like event\n        fireEvent.change(inputElement, { target: { value: 'Go Grocery Shopping' } })\n        expect(inputElement.value).toBe('Go Grocery Shopping')\n    })\n```\n\n```js\nit('should have an empty input when add button is clicked', () => {\n        render(\n            <AddInput\n                todos={[]}\n                setTodos={mockedSetTodo}\n            />\n        )\n        const inputElement = screen.getByPlaceholderText(/Add a new task here.../i)\n        const buttonElement = screen.getByRole(\"button\", { name: /Add/i })\n        fireEvent.change(inputElement, { target: { value: 'Go Grocery Shopping' } })\n        // Clicks the button\n        fireEvent.click(buttonElement)\n        expect(inputElement.value).toBe('')\n    })\n```\n","n":0.085}}},{"i":169,"$":{"0":{"v":"Async Tests","n":0.707},"1":{"v":"\n\n![Problem with async requests in tests](/assets/images/2022-07-28-09-58-57.png)\n\nTo test async operations, we face the following problems:\n\n1. Requests cost money either to us or the provider of the API.\n2. Requests can be slow depending on the API.\n3. Our tests are dependent on something that's external.\n\nTo fix this, we can mock our API requests so that we are not dependent on an external source.\n\nFor mocking, we do the following.\n\n1. In this example, we would be mocking axios. Firstly, we need to create a folder called `__mocks__`.\n2. Then we create a file called axios.js. **Please note that the name of the file and the folder is very important.**\n\n```js\nconst mockResponse = {\n    data: {\n        results: [\n            {\n                name: {\n                    first: \"Laith\",\n                    last: \"Harb\"\n                },\n                picture: {\n                    large: \"https://randomuser.me/api/portraits/men/59.jpg\"\n                },\n                login: {\n                    username: \"ThePhonyGOAT\"\n                }\n            }\n        ]\n    }\n}\n\n\nexport default {\n    get: jest.fn().mockResolvedValue(mockResponse)\n}\n```\n\n`jest.fn()` is used to create mock functions.\n\nFor capturing elements dependent on an async API call, we need to use `findBy` as follows:\n\n```js\nconst MockFollowersList = () => {\n    return (\n        <BrowserRouter>\n            <FollowersList />\n        </BrowserRouter>\n    )\n}\n\ndescribe('FollowersList', () => {\n\n    it('should render the followers list card', async () => {\n        render(<MockFollowersList />)\n        const followerDivElement = await screen.findByTestId('follower-item-0')\n        expect(followerDivElement).toBeInTheDocument()\n    })\n})\n```\n\nStill here it won't work as React Scripts reset our mocks on every render. To make sure this doesn't happen, there's a way to test:\n\n1. Go to the path: `node_modules/react-scripts/scripts/utils/createJestConfig.js`.\n2. Search for the `resetMocks` which would be set to `true`. It's usually in a `config` object and on line 69.\n3. Set it's value to `false` and restart your test runner.\n\nAlthough this method isn't recommended and we need to find an alternative or check if it's fixed. #todo\n","n":0.061}}},{"i":170,"$":{"0":{"v":"Styling","n":1},"1":{"v":"\nThere are two primary ways to style React components.\n\n1. Inline styles with the `style` `prop`.\n2. Regular CSS with the `className` `prop`.\n","n":0.218}}},{"i":171,"$":{"0":{"v":"Inline Styles","n":0.707},"1":{"v":"\nIn [[HTML|cs.webdev.frontend.language.html]], we'd pass a string of [[CSS|cs.webdev.frontend.language.css]]:\n\n```html\n<div style=\"margin-top: 20px; background-color: blue;\"></div>\n```\n\nIn React, however, we'll pass an object of CSS:\n\n```jsx\n<div style={{marginTop: 20, backgroundColor: 'blue'}} />\n```\n\nIn terms of React, `{{}}` is a combination of JSX expression and an object expression. These properties are `camelCased` rather than `kebab-cased`. This matches the style property of [[DOM|cs.webdev.frontend.language.js.dom]] nodes which is a [[CSSStyleDeclaration|cs.webdev.frontend.language.js.cssstyledeclaration]] object.\n","n":0.13}}},{"i":172,"$":{"0":{"v":"className","n":1},"1":{"v":"\nWe can pass specific classes to an HTML element using the `class` attribute, similarly, for React components we use the `className` prop.\n\nWe use `className` as the `prop` name because `class` is a reserved keyword in JavaScript.\n\n```jsx\nconst largeBox = <div style={{backgroundColor: 'orange', fontStyle: 'italic'}} className=\"box box--large\">large orange box</div>\n```\n","n":0.146}}},{"i":173,"$":{"0":{"v":"State Management","n":0.707},"1":{"v":"\nState is any piece of data that changes over time. When we consider any piece of data that changes overtime, that complicates a lot of things. If we had a static piece of data, we can stick to a server template and deploy it over a CDN which will then serve the data to wherever it is needed.\n\nIn case of React, the React UI is a function of it's state. Whenever we consider React components, we usually think of it as Lego blocks that we can fit anywhere to build our systems. However the same mentality is not kept when we think about state management.\n\nThe key to a good solution to the state management solution is to think of the application state as how it maps to the application tree.\n\n- It's a difficult problem to solve.\n- It's usually over engineered.\n\n**Note**: We must remember that React in itself a state management library with the presence of `useState` or `useContext` hook.\n","n":0.079}}},{"i":174,"$":{"0":{"v":"Tools","n":1}}},{"i":175,"$":{"0":{"v":"Redux","n":1},"1":{"v":"\nRedux is a complex state management tool with a single store as a central data store.\n","n":0.25}}},{"i":176,"$":{"0":{"v":"Store","n":1}}},{"i":177,"$":{"0":{"v":"Reducer","n":1},"1":{"v":"\nManages the state and returns the newly updated state. The reducer function contains an Action Parameter ([[cs.webdev.frontend.language.js.jsframework.react.state-management.tools.redux.actions]]). It listens to the actions based on which it fetches/updates the state.\n","n":0.186}}},{"i":178,"$":{"0":{"v":"Actions","n":1},"1":{"v":"\nActions are events that are rules to guide the reducer to perform some operations on the store.\n\nActions have two properties:\n\n1. A unique identifier called Type\n2. Payload which contains the data\n","n":0.183}}},{"i":179,"$":{"0":{"v":"Dispatch","n":1},"1":{"v":"\nDispatch is used to send actions to update the [[cs.webdev.frontend.language.js.jsframework.react.state-management.tools.redux.store]].\n","n":0.316}}},{"i":180,"$":{"0":{"v":"React Query","n":0.707},"1":{"v":"\nReact Query is a State Management library for React which is specifically designed to work with the server state and it also includes a server cache. It makes fetching, caching, synchronizing your sever state as well as updating your server state easier.\n","n":0.154}}},{"i":181,"$":{"0":{"v":"Why React Query","n":0.577},"1":{"v":"\nWhen it comes to managing state, people usually prefer a global state management systems like Redux or MobX. These libraries can work, however,they introduce more problems treating the server state the same as the client state and using a global store.\n\nWhat we need is a library that takes care specifically of the server state, something that handles errors, loads the server state and handles all the server state [[Requirements|cs.webdev.frontend.language.js.jsframework.react.state-management.types-of-application-state.server-state.requirements]].\n\n React Query solves all of them - most of them automatically! And even though React Query ships with sensible defaults, pretty much every aspect of how it fetches, stores, and delivers your server state can be configured.\n","n":0.097}}},{"i":182,"$":{"0":{"v":"Queries","n":1},"1":{"v":"\nA query is a declarative dependency to some asynchronous source of data that's tied to a unique key. Basically, it's what React Query uses to fetch data from a server with any Promise based method (inclusing GET or POST Methods).\n\nWhat makes React Query really powerful, is it's ability to create and maintain a cache for each one of it's queries. To accomplish this, React Query uses two things:\n\n1. QueryClient\n2. QueryClientProvider\n\nFirstly, we need to create a QueryClient and wrap our entire application with a QueryClientProvider which makes the QueryClient cache available to the entire application.\n\n```jsx\nimport ReactDOM from 'react-dom'\nimport App from './App' \nimport { QueryClient, QueryClientProvider } from 'react-query'\n\nconst queryClient = new QueryClient(); \n\nReactDOM.render( \n    <QueryClientProvider client={queryClient}> \n        <App /> \n    </QueryClientProvider>\n    , document.getElementById('root')\n);\n```\n\nNext up, we need to use the [[useQuery|cs.webdev.frontend.language.js.jsframework.react.state-management.tools.react-query.apis.useQuery]] hook to create new queries.\n","n":0.086}}},{"i":183,"$":{"0":{"v":"QueryClientProvider","n":1},"1":{"v":"\n`QueryClientProvider` is what makes [[QueryClient|cs.webdev.frontend.language.js.jsframework.react.state-management.tools.react-query.queries.QueryClient]] available anywhere in your application when you need it.\n","n":0.267}}},{"i":184,"$":{"0":{"v":"QueryClient","n":1},"1":{"v":"\n`QueryClient` is the foundation of React Query. Among other things, it keeps the cache of all of the queries that have been made, and tracks the state of each query.\n","n":0.183}}},{"i":185,"$":{"0":{"v":"Mutations","n":1},"1":{"v":"\nUnlike queries, mutations are used to perform CRUD operations on data or perform server side-effects. For this, we can use a [[useMutation|cs.webdev.frontend.language.js.jsframework.react.state-management.tools.react-query.apis.useMutation]] hook.\n\n```jsx\nfunction App() {\n   const mutation = useMutation(newTodo => {\n     return axios.post('/todos', newTodo)\n   })\n\n   return (\n     <div>\n       {mutation.isLoading ? (\n         'Adding todo...'\n       ) : (\n         <>\n           {mutation.isError ? (\n             <div>An error occurred: {mutation.error.message}</div>\n           ) : null}\n\n           {mutation.isSuccess ? <div>Todo added!</div> : null}\n \n           <button\n             onClick={() => {\n               mutation.mutate({ id: new Date(), title: 'Do Laundry' })\n             }}\n           >\n             Create Todo\n           </button>\n         </>\n       )}\n     </div>\n   )\n }\n```\n","n":0.108}}},{"i":186,"$":{"0":{"v":"APIs","n":1},"1":{"v":"\nA list of all React Query API's and it's basic usage.\n","n":0.302}}},{"i":187,"$":{"0":{"v":"useQuery","n":1},"1":{"v":"\nThis hook performs the data fetching, caches the results, and provides us with the state of the query. The object returned by useQuery includes the fetched data (`query.data`), the state of the query (`isLoading`, `isSuccess` and `isError`), and a bunch of methods for interacting with the query.\n\nAny time the query function throws an error or returns a rejected promise, React Query will treat that as an error, setting the `isError` state to `true`, and setting the `error` property to the thrown or rejected value.\n\n### Usage\n\n```jsx\n\nimport { useQuery } from 'react-query'\n\nfunction fetchUser (username) { \n    return fetch(`https://api.github.com/users/${username}`).then((res) => res.json()) \n}\n\nexport default function GithubUser({ username }) { \n    const userQuery = useQuery( [username], () => fetchUser(username) ); \n    const data = userQuery.data ... \n}\n```\n\n`useQuery` accepts two arguments, a query key and a query function.\n\n1. The query key is an array used to keep track of the query in the cache. Whenever any of the items in the query key change, React Query treats it as a new query and will fetch new data.\n2. The query function is the function that actually fetches the data.\n","n":0.074}}},{"i":188,"$":{"0":{"v":"Query Keys","n":0.707},"1":{"v":"\nA query key is something that's used to uniquely identify the queries. This same query key is used to uniquely identify the query data from the cache. This makes it possible to use the same query data multiple times without making any further duplicate requests.\n\nQuery keys behave the exact same as the useEffect dependency array. Each item in the query key will cause the query to refetch when it changes. e.g. the following query will refetch when the `username` variable changes.\n\n```jsx\nuseQuery(['user', username], fetchUser);\n```\n\nThat means the query key has a direct connection to the query function. Any values in the query function that could change should be put somewhere in our query key, so React Query knows to rerun the query function when they do change. Most query keys will use strings and numbers as their array items, but Objects are also useful.\n\n**Note:** The order of our query key array is important, since reordering the items would change the query key.\n\n**Note:** React Query v4 only supports arrays as query keys.\n","n":0.077}}},{"i":189,"$":{"0":{"v":"Usage","n":1},"1":{"v":"\n1.For resources that don't need any extra parameters:\n\n```jsx\nuseQuery(['labels'], fetchLabels); \nuseQuery(['users'], fetchUsers); \nuseQuery(['issues'], fetchIssues);\n```\n\n2.We can separate the different parts of our query key into separate items, like any parameters, IDs, indices - anything that our query depends on. These could be anything: literal strings, numbers, objects, or nested arrays.\n\n```jsx\nuseQuery(['users', 1], fetchUser); \nuseQuery(['labels', labelName], fetchLabel); \nuseQuery(['issues', {completed: false}], fetchIssues);\n```\n\n3.To write an effective query key, we need to start with the most generic item to the most specific. However, to start off, it's best to put in a string key at the beginning of the array to uniquely identify the kind of data being fetched as well as identify it from the cache.\n\n```jsx\nuseQuery(['issues', owner, repo], queryFn);\n```\n\n4.Make sure not to put the same query key for two different different queries as they will overlap each other's data based on whatever was called later. e.g.:\n\n```jsx\nconst usersQuery = useQuery([userId], fetchUsers); \nconst commentsQuery = useQuery([commentId], fetchComments);\n```\n\nIf we use incrementing id's for both users and comments, at one point when both of them have a value of `1`, it will cause a key collision and it will override the data in the cache.\n\n5.We can also use Objects in the query key. e.g. Let's imagine the following scenario:\n\nHere's what that Github URL looks like when using a filter to get only closed issues: [https://api.github.com/repos/uidotdev/usehooks/issues?state=closed].\nHere, we're keeping the `open` and `closed` state in React state. The most naïve approach would be to to put the filter in as the last item of the query key array.\n\n```jsx\nfunction Issues({ owner, repo }) { \n    const [issueState, setIssueState] = useState('open'); \n    const issuesQuery = useQuery( ['issues', owner, repo, issueState], queryFn ); \n    ... \n} \n```\n\nThis would work just fine. Whenever our state changes, the query will rerun. If we have multiple sets of filters, since changing the order of the array will change the query key, we can have filter as an object, so now the order doesn't matter.\n\n```jsx\nfunction Issues({ owner, repo }) { \n    const [issueState, setIssueState] = useState('open'); \n    const [assignee, setAssignee] = useState(); \n    const [labels, setLabels] = useState(''); \n    const issuesQuery = useQuery( [ 'issues', \n                                    owner, \n                                    repo, \n                                    { \n                                        state: issueState, \n                                        assignee, \n                                        labels: labels || undefined \n                                    }, \n                                ]\n                                , queryFn ); \n    ... \n}\n```\n","n":0.052}}},{"i":190,"$":{"0":{"v":"Query Function","n":0.707},"1":{"v":"\nAny function that returns a promise is a valid query function. This means apart from using the JavaScript `fetch` API, we can use any kind of third party data fetching libraries like Axios or graphql-request, or query any asynchronous browser API, like the geolocation API.\n\n```jsx\nasync function getLocation() {\n  return new Promise((resolve, reject) => {\n    navigator\n      .geolocation\n      .getCurrentPosition(resolve, reject);\n  });\n}\n\nfunction Location() {\n  const locationQuery = useQuery([\"location\"], getLocation);\n\n  if (locationQuery.isLoading) {\n    return <p>Calculating location...</p>;\n  }\n\n  if (locationQuery.error) {\n    return <p>Error: {userQuery.error.message}</p>;\n  }\n\n  return (\n    <p>\n      Your location is:\n      {locationQuery.data.coords.latitude}, \n      {locationQuery.data.coords.longitude}\n    </p>\n  );\n}\n```\n","n":0.105}}},{"i":191,"$":{"0":{"v":"Arguments","n":1},"1":{"v":"\nWe can pass arguments into a Query Function in two ways:\n1.By using an Arrow function:\n\n```js\nconst userQuery = useQuery(\n  [\"user\", username],\n () => getGithubUser(username),\n);\n```\n\n2.Using the query keys which is more helpful and resilient:\n\n```jsx\nawait function getGithubUser({ queryKey }) {\n  const [user, username] = queryKey;\n\n  return fetch(`https://api.github.com/users/${username}`)\n    .then((res) => res.json());\n};\n\nconst User = ({ username }) => {\n  const userQuery = useQuery(\n    [\"user\", username],\n    getGithubUser,\n  );\n\n  if (userQuery.isLoading) {\n    return <p>Getting user...</p>;\n  }\n\n  if (userQuery.error) {\n    return (\n      <p>Error getting user: {userQuery.error.message}</p>\n    );\n  }\n\n  return <p>{userQuery.data.name}</p>;\n};\n```\n\nOr even a more complex scenario like:\n\n```jsx\nfunction getIssues({ queryKey }) {\n  const [issues, owner, repo, filters] = queryKey;\n\n  const filterQuery = new URLSearchParams();\n\n  if (filters.assignee) {\n    filterQuery.append(\"assignee\", filters.assignee);\n  }  \n\n  if (filters.labels && filters.labels.length > 0) {\n    filterQuery.append(\"labels\", filters.labels.join(\",\"));\n  }  \n\n  if (filters.state) {\n    filterQuery.append(\"state\", filters.state);\n  }  \n\n  const filterQueryString = filterQuery.toString();\n\n  return fetch(\n    `https://api.github.com/repos/${owner}/${repo}/issues${\n      filterQueryString ? `?${filterQueryString}` : \"\"\n    }`,\n  ).then((res) => res.json());\n}\n\nfunction Issues({ owner, repo }) {\n  const [issueState, setIssueState] = useState(\"open\");\n  const [assignee, setAssignee] = useState();\n  const [labels, setLabels] = useState(\"\");\n\n  const issuesQuery = useQuery(\n    [\n      \"issues\",\n      owner,\n      repo,\n      { \n        state: issueState, \n        assignee, \n        labels: labels || undefined \n      },\n    ],\n    getIssues,\n  );\n  \n  ...\n}\n```\n","n":0.072}}},{"i":192,"$":{"0":{"v":"Custom Hook","n":0.707},"1":{"v":"\nWe can also use a custom hook to provide the same query in multiple components. This lets us keep the query function local to the query that is using it while still allowing the query to be used across multiple components.\n\n```js\nfunction useGithubIssuesQuery({ owner, repo, filters }) {\n  function getIssues() {\n    const filterQuery = new URLSearchParams();\n    \n    if (filters.assignee) {\n      filterQuery.append(\"assignee\", filters.assignee);\n    }\n\n    if (filters.labels && filters.labels.length > 0) {\n      filterQuery.append(\"labels\", filters.labels.join(\",\"));\n    }\n\n    if (filters.state) {\n      filterQuery.append(\"state\", filters.state);\n    }\n\n    const filterQueryString = filterQuery.toString();\n\n    return fetch(\n      `https://api.github.com/repos/${owner}/${repo}/issues${\n        filterQueryString ? `?${filterQueryString}` : \"\"\n      }`,\n    ).then(res => res.json());\n  }\n\n  return useQuery(\n    [\"issues\", owner, repo, filters],\n    getIssues\n  );\n}\n```\n\nWe can now use this in any component anywhere in our app and be confident that all of the queries are sharing the same cache data and minimizing the number of network requests.\n","n":0.086}}},{"i":193,"$":{"0":{"v":"useQueries","n":1},"1":{"v":"\nThe useQueries hook can be used to fetch data from multiple queries. It accepts an array with query options similar to useQuery hook and it returns an array with all the query results.\n\n```jsx\n const results = useQueries([\n   { queryKey: ['post', 1], queryFn: fetchPost },\n   { queryKey: ['post', 2], queryFn: fetchPost },\n ])\n```\n","n":0.139}}},{"i":194,"$":{"0":{"v":"useMutation","n":1}}},{"i":195,"$":{"0":{"v":"Types of Application State","n":0.5},"1":{"v":"\nIn React, we need to consider state into two parts: Client state and Server State. These two aren't the same thing.\n\n- **Server Cache**: State that's actually stored on the server, that we store in the client for quick-access. (e.g. User Data).\n- **UI State**: State that's only useful for the UI to  control interactivity of different parts of the app. (e.g. modal `isOpen` state).\n\nYou can use React for UI state. As a matter of fact, React is designed to handle this UI state for us.\n\nYou can use React Query for your server cache.\n\nSome key points:\n\n- Server cache !== UI State. Use React Query for Server Cache. (Checkout Remix)\n- React is a state management library.\n- Lift state up (or down! [**Colocation**](https://kentcdodds.com/blog/state-colocation-will-make-your-react-app-faster)).\n- Use composition when `prop-drilling` is a pain (and sometimes use Context).\n- If performance is an issue, use `jotai`.\n\nReferences:\n\n1. [Application State Management with React](https://kentcdodds.com/blog/application-state-management-with-react).\n2. [React State Management from Lee Robinson](https://leerob.io/blog/react-state-management#state-management-options)\n","n":0.082}}},{"i":196,"$":{"0":{"v":"Server State","n":0.707},"1":{"v":"\nServer state consists of data that's persisted in the backend servers and sent to the UI through API Calls. e.g. user data, post data, comment data etc.\n\nThis is the data that needs to be persisted across browser sessions.\n\nThere's one more thing that we need to consider when it comes to server state. Multiple clients can access the server's data and manipulate it at any time. This has huge implications on how we store Server state over at the client.\n\nReact is notoriously unopinionated when it comes to managing Server State. The only recommendation that React provides is to fetch the data inside a useEffect hook which deals with any kind of side effects in the application which includes async operations.\n","n":0.092}}},{"i":197,"$":{"0":{"v":"Requirements","n":1},"1":{"v":"\nWhen it comes to requirements for fetching server data, we need to keep the following things in mind:\n\n1. Rendering the same data across multiple components without doing re-fetches.\n2. De-duplicating identical requests.\n3. Using a cache to limit the number of `fetch` requests.\n4. Automatically refetching to have the freshest data.\n5. Handling pagination.\n6. Updating our local data when we make mutations to the remote data.\n7. Orchestrating requests that depend on the result of other requests\n","n":0.118}}},{"i":198,"$":{"0":{"v":"Properties","n":1},"1":{"v":"\nProperties:\n\n1. Stored remotely: The client doesn't have control over the data on where and how it's stored.\n\n2. Asynchronous: It takes a while for the data to arrive from the server to the client.\n\n3. Owned by many users: A lot of users can interact with the data at the same time and since it's hosted over a server, many users can change the data.\nAny data that comes from the server can become outdated in a matter of seconds, so we should treat it with care.\n","n":0.109}}},{"i":199,"$":{"0":{"v":"Client State","n":0.707},"1":{"v":"\nThis is the state that's only useful for the UI to control the interactivity of different parts of the application e.g. `isOpen` property of a modal which is used to check if a modal is open or not or if the theme is in light mode or dark mode.\n\nProperties of Client state:\n\n1. It's Ephemeral i.e. it gets lost when the browser is refreshed or closed.\n\n2. Synchronous i.e. it's readily available.\n\n3. Client Owned i.e. it's local to the browser that created it.\n","n":0.111}}},{"i":200,"$":{"0":{"v":"Design","n":1},"1":{"v":"\nWhenever we are designing any kind of UI state management system, we must keep in mind to **keep the state as low as possible**.\n\nThe few ways we can design a Client state management system are the following:\n\n1. Local state using `useState` hooks.\n\n2. Lifting the state and then passing down the `props` via `prop` drilling.\n\n3. Global states using `contexts`.\n\nWhen we are dealing with global states, we can also use Redux, MobX etc.\n","n":0.119}}},{"i":201,"$":{"0":{"v":"Prop Drilling","n":0.707},"1":{"v":"\nIn this case, if we have multiple components in the same hierarchy, we can lift the state up to a common parent and drill it down to it's child components. This is called `prop-drilling`:\n\n```jsx\n export default function Home() {\n  const [country, setCountry] = useState('CA')\n  return (\n   <div>\n    <CountryDetails country={country}/>\n    <CountryPicker country={country} setCountry={setCountry}/>\n   </div>\n  )\n }\n\n function CountryPicker({country, setCountry}) {\n  \n\n  return (\n   <select value={country} onChange={(event) => { \n    setCountry(event.target.value)}\n   }>\n    <option value='CA'>Canada</option>\n    <option value='US'>United States of America</option>\n   </select>\n  )\n }\n\n function CountryDetails({country}) {\n  return <h1>{country}</h1>\n }\n```\n\nHowever, if we have child components that's using the same piece of state that don't belong to the same hierarchy, we can lift the state upto the topmost common parent, however, it will have two problems:\n\n1. When we drill the `prop` down to the children, any component that doesn't need the data will have access to the state.\n2. When the state changes in any one of the parent, it will re-render the entire chain of components which might result in a performance hit.\n3. It becomes unscalable and unmanageable once the complexity of the application increases.\n\nTo manage this, we use either [[Composition|cs.webdev.frontend.language.js.jsframework.react.state-management.types-of-application-state.client-state.design.composition]] or [[Global State|cs.webdev.frontend.language.js.jsframework.react.state-management.types-of-application-state.client-state.design.global-state]]\n","n":0.073}}},{"i":202,"$":{"0":{"v":"Performance","n":1}}},{"i":203,"$":{"0":{"v":"Local State","n":0.707},"1":{"v":"\nThe first way to manage client state is through managing a local state.\n\n```jsx\n export default function Home() {\n  return (\n   <div>\n    <CountryPicker />\n   </div>\n  )\n }\n\n function CountryPicker() {\n  const [country, setCountry] = useState('CA')\n\n  return (\n   <select value={country} onChange={(event) => { \n    setCountry(event.target.value)}\n   }>\n    <option value='CA'>Canada</option>\n    <option value='US'>United States of America</option>\n   </select>\n  )\n }\n```\n\nThis state is however limited to only one component i.e. the one that creates it. If we need to use the same data in multiple child components in the same hierarchy, we use [[`prop-drilling`|cs.webdev.frontend.language.js.jsframework.react.state-management.types-of-application-state.client-state.design.prop-drilling]]\n","n":0.107}}},{"i":204,"$":{"0":{"v":"Global State","n":0.707},"1":{"v":" \n Sometimes composition doesn't work for us. For that, we can use the context API (Note: [Before you use Context](https://reactjs.org/docs/context.html#before-you-use-context)):\n\n  ```jsx\n const CounterContext = React.createContext()\n \n function Counter() {\n  const {count, increment} = React.useContext(CounterContext);\n  return <button onClick={increment}>{count}</button>\n }\n\n function CounterDisplay({count}) {\n  const {count} = React.useContext(CounterContext);\n  return <div>The current counter count is {count}</div>\n }\n\n function App() {\n  const [count, setCount] = React.useState(0)\n  const increment = () => setCount(c => c + 1)\n  return <div>\n   <CounterContext.Provider value={{count, increment}}>\n    <CounterDisplay />\n    <Counter />\n   </CounterContext.Provider>\n  </div>\n }\n```\n\nWe can use `useReducer` hook along with it rather than `useState` as well:\n\n```jsx\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case 'INCREMENT': {\n      return {count: state.count + 1}\n    }\n    default: {\n      throw new Error(`Unsupported action type: ${action.type}`)\n    }\n  }\n}\n\nfunction CountProvider(props) {\n  const [state, dispatch] = React.useReducer(countReducer, {count: 0})\n  const value = React.useMemo(() => [state, dispatch], [state])\n  return <CountContext.Provider value={value} {...props} />\n}\n\nfunction useCount() {\n  const context = React.useContext(CountContext)\n  if (!context) {\n    throw new Error(`useCount must be used within a CountProvider`)\n  }\n  const [state, dispatch] = context\n\n  const increment = () => dispatch({type: 'INCREMENT'})\n  return {\n    state,\n    dispatch,\n    increment,\n  }\n}\n```\n\nTo effectively use the Context API, read [this](https://kentcdodds.com/blog/state-colocation-will-make-your-react-app-faster).\n\nHere are a few important things to remember when doing things this way:\n\n1. Not everything in your application needs to be in a single state object. Keep things logically separated (user settings does not necessarily have to be in the same context as notifications). You will have multiple providers with this approach.\n2. Not all of your context needs to be globally accessible! **Keep state as close to where it's needed as possible.**\n","n":0.063}}},{"i":205,"$":{"0":{"v":"Composition","n":1},"1":{"v":"\nInstead of making components that render other components and wiring props everywhere like this:\n\n```jsx\n function App() {\n  const [someState, setSomeState] = React.useState('some state')\n  return <>\n   <Header someState={someState} onStateChange={setSomeState} />\n   <LeftNav someState={someState} onStateChange={setSomeState} />\n   {/* ... */}\n  </>\n }\n```\n\nMaybe you can compose things together (Vue isn't the only one with `slots`. React had them from Day 1):\n\n```jsx\n function App() {\n  const [someState, setSomeState] = React.useState('some state')\n  return <>\n   <Header \n    logo={<Logo someState={someState} />}\n    settings={<Settings onStateChange={setSomeState} />} \n   />\n   <LeftNav>\n    <SomeLink someState={someState} />\n    <SomeOtherLink someState={someState} />\n    <Etc someState={someState} />\n   </LeftNav>\n   {/* ... */}\n  </>\n }\n```\n","n":0.104}}},{"i":206,"$":{"0":{"v":"Colocating the State","n":0.577},"1":{"v":"\nImagine the following example:\n\n```jsx\nfunction App() {\n  return (\n    <UserProvider username={username}>\n      <NotificationsProvider>\n        <ThemeProvider>\n          <AuthenticationProvider>\n            <Router>\n              <HomeScreen path=\"/\" />\n              <AboutScreen path=\"/about\" />\n              <UserScreen path=\"/:userId\" />\n              <UserSettingsScreen path=\"/settings\" />\n              <NotificationsScreen path=\"/notifications\" />\n            </Router>\n          </AuthenticationProvider>\n        </ThemeProvider>\n      </NotificationsProvider>\n    </UserProvider>\n  )\n}\n```\n\nHere's what a file structure might look like for this:\n\n```text\nmy-cool-app\n└── src\n    ├── index.js\n    ├── providers\n    │   ├── auth.js\n    │   ├── notifications.js\n    │   ├── theme.js\n    │   ├── user.js\n    │   └── ...etc\n    ├── screens\n    │   ├── about.js\n    │   ├── home.js\n    │   ├── notifications\n    │   │   ├── index.js\n    │   │   ├── list.js\n    │   │   ├── tab.js\n    │   │   └── type-list.js\n    │   ├── settings.js\n    │   └── user\n    │       ├── activity.js\n    │       ├── index.js\n    │       ├── info.js\n    │       └── nav.js\n    └── utils\n        └── ...etc\n```\n\nLet's colocate the context:\n\n```jsx\nfunction App() {\n  return (\n    <ThemeProvider>\n      <AuthenticationProvider>\n        <Router>\n          <HomeScreen path=\"/\" />\n          <AboutScreen path=\"/about\" />\n          <UserScreen path=\"/:userId\" />\n          <UserSettingsScreen path=\"/settings\" />\n          <NotificationsScreen path=\"/notifications\" />\n        </Router>\n      </AuthenticationProvider>\n    </ThemeProvider>\n  )\n}\n\nfunction NotificationsScreen() {\n  return (\n    <NotificationsProvider>\n      <NotificationsTab />\n      <NotificationsTypeList />\n      <NotificationsList />\n    </NotificationsProvider>\n  )\n}\n\nfunction UserScreen({username}) {\n  return (\n    <UserProvider username={username}>\n      <UserInfo />\n      <UserNav />\n      <UserActivity />\n    </UserProvider>\n  )\n}\n```\n\nFor this, the file structure would look like:\n\n```text\nmy-cooler-app\n└── src\n    ├── index.js\n    ├── providers\n    │   ├── auth.js\n    │   ├── theme.js\n    │   └── ...etc\n    ├── screens\n    │   ├── about.js\n    │   ├── home.js\n    │   ├── notifications\n    │   │   ├── index.js\n    │   │   ├── list.js\n    │   │   ├── provider.js\n    │   │   ├── tab.js\n    │   │   └── type-list.js\n    │   ├── settings.js\n    │   └── user\n    │       ├── activity.js\n    │       ├── index.js\n    │       ├── info.js\n    │       ├── nav.js\n    │       └── provider.js\n    └── utils\n        └── ...etc\n```\n\nNotice that each page can have its own provider that has data necessary for the components underneath it. Code splitting \"just works\" for this stuff as well. How you get data _into_ each provider is up to the hooks those providers use and how you retrieve data in your application, but you know just where to start looking to find out how that works (in the provider).\n\n**Advantages of Colocation:**\n\n- Code-splitting just works.\n- File structure scales well. (Read [File structure guide by Dan Abramov](http://react-file-structure.surge.sh/))\n- Reduced indirection.\n","n":0.055}}},{"i":207,"$":{"0":{"v":"Rendering Arrays","n":0.707},"1":{"v":"\nIf we want to render components from an array of elements, we do the following:\n\n```jsx\nconst allItems = [\n  {id: 'apple', value: '🍎 apple'},\n  {id: 'orange', value: '🍊 orange'},\n  {id: 'grape', value: '🍇 grape'},\n  {id: 'pear', value: '🍐 pear'},\n]\n\nfunction App() {\n  const [items, setItems] = React.useState(allItems)\n\n  function addItem() {\n    const itemIds = items.map(i => i.id)\n    setItems([...items, allItems.find(i => !itemIds.includes(i.id))])\n  }\n\n  function removeItem(item) {\n    setItems(items.filter(i => i.id !== item.id))\n  }\n\n  return (\n    <div className=\"keys\">\n      <button disabled={items.length >= allItems.length} onClick={addItem}>\n        add item\n      </button>\n      <ul style={{listStyle: 'none', paddingLeft: 0}}>\n        {items.map(item => (\n          <li key={item.id}>\n            <button onClick={() => removeItem(item)}>remove</button>{' '}\n            <label htmlFor={`${item.id}-input`}>{item.value}</label>{' '}\n            <input id={`${item.id}-input`} defaultValue={item.value} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\nNotice that for each one of the list item, we're providing a key. That's very important to provide as this is how React uniquely identifies each one of the list items.\n\nSo if we don't provide a key, it will first of all throw a warning in the console. Apart from that if you add, modify or remove a particular element from the list, React needs to be able to uniquely identify which element was manipulated.\n\nReact takes a snapshot of the previous DOM and the latest DOM and then makes changes accordingly. So, it should know the element needs to be added, modified or removed, was at the first, the middle or the end. If we don't provide a key, it will try it's best to re-render the elements, however, it doesn't always nail the re-render and may lead to unexpected results especially when the element in picture is managed by some state.\n\nIt's also used to maintain focus, highlighted states etc.\n\n**Note:** Providing the array index as a key doesn't solve this issue and you either need to give it a unique key or generate a unique key and provide it.\n\n**Reference:**\n\n1. [Understanding React's key prop](https://kentcdodds.com/blog/understanding-reacts-key-prop)\n2. [Why React needs a key prop](https://epicreact.dev/why-react-needs-a-key-prop/)\n","n":0.057}}},{"i":208,"$":{"0":{"v":"JSX","n":1},"1":{"v":"\nIn order to create a UI with JSX:\n\n```html\n<body>\n    <div id=\"root\"></div>\n    <script type=\"text/javascript\">\n        const rootElement = document.getElementById('root')\n        const element = <div className=\"container\">Hello World</div>\n        ReactDOM.render(element, rootElement) // As per React 18, this is not the way to attach the app to the root element\n    </script>\n</body>\n```\n\nUnfortunately, this syntax i.e. `<div></div>` is not understood by the browser natively inside a script tag. This syntax is called JSX.\n","n":0.126}}},{"i":209,"$":{"0":{"v":"Compiling JSX","n":0.707},"1":{"v":"\nTo make sure our browsers understand the JSX syntax, we need to use a tool like [[Babel|cs.webdev.frontend.language.js.tools.babel]] to transpile our code into regular JavaScript that the browser can understand. In most modern React applications, you can add Babel as an [[npm|cs.webdev.frontend.language.js.tools.npm]] dependency to transpile your entire project.\n\nThe Babel transpiler will comvert the above JSX syntax into `React.createElement` functions as shown below:\n\n```html\n<body>\n    <div id=\"root\"></div>\n    <script type=\"text/javascript\">\n        const rootElement = document.getElementById('root')\n        const element = React.createElement('div', {\n            className: 'container',\n            children: 'Hello World'\n        })\n        ReactDOM.render(element, rootElement) \n        // As per React 18, this is not the way to attach the app to the root element\n    </script>\n</body>\n```\n","n":0.099}}},{"i":210,"$":{"0":{"v":"Forms","n":1},"1":{"v":"\nForms can be handled in React in the following manner:\n\n```jsx\nfunction UsernameForm({onSubmitUsername}) {\n  const [username, setUsername] = React.useState('')\n  const inputField = useRef(null)\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    onSubmitUsername(username)\n  }\n\n  const handleChange = () => {\n    const value = inputField.current.value\n    setUsername(value.toLowerCase())\n  }\n\n  return (\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor='username'>Username:</label>\n          <input name=\"username\" type=\"text\" ref={inputField} onChange={handleChange} value={username}/>\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n  )\n}\n```\n\nThere are a few key things to notice:\n\n1. The `form` element has an `onSubmit` event handler that will handle the form submission.\n2. The default behavior of forms is to submit a POST request to the local server with the form values as query parameters. In order to prevent the default behaviour, we need to use `event.preventDefault()`.\n3. In HTML, in `label` element, we use the `for` keyword to tie it to a form field. However, in JS, `for` is a reserved keyword and hence, we use `htmlFor` for the same purpose.\n4. In this case, we are managing the input field with a local state using the [[cs.webdev.frontend.language.js.jsframework.react.components.types.functional.hooks.useState]] hook to make it into a controlled input field. for that we need to provide a `value` tied to the state and an `onChange` handler to update the state.\n5. In case we didn't provide an `onChange` handler, it will be a read only field and you won't be able to enter any value in it.\n6. We can also pass a default value to the input field through a `defaultValue` property.\n7. We can also capture the input field value if we tie it to a `ref` using the [[cs.webdev.frontend.language.js.jsframework.react.components.types.functional.hooks.useRef]] Hook.\n","n":0.063}}},{"i":211,"$":{"0":{"v":"Events","n":1},"1":{"v":"\nIn React, all the event handlers will be passed an instance of `SyntheticEvent` which is a cross-browser wrapper around the browser's native events. It has the same interface as the browser's native event, including `stopPropagation()` and `preventDefault()`, except the event works identically across all the browsers. If you want to use the underlying browser event for some reason, you can access it via the `nativeEvent` attribute. For example in `onMouseLeave` `event.nativeEvent` will point to a `mouseout` event.\n\nThis is done for performance reasons and also React does something called as event delegation.\n","n":0.105}}},{"i":212,"$":{"0":{"v":"TS","n":1},"1":{"v":"\nYou can use `React.FormEvent` for form events or you can use, `React.SyntheticEvent` as well.\n","n":0.267}}},{"i":213,"$":{"0":{"v":"createElement","n":1},"1":{"v":"\nIn order to create a UI with React's `createElement` API:\n\n```html\n<body>\n    <div id=\"root\"></div>\n    <script type=\"text/javascript\">\n        const rootElement = document.getElementById('root')\n        const element = React.createElement('div', {\n            className: 'container',\n            children: 'Hello World'\n        })\n    ReactDOM.render(element, rootElement) // As per React 18, this is not the way to attach the app to the root element\n    </script>\n</body>\n```\n\nThe `createElement` creates a React Element which is an object.\n\nBut we don't need to use the create our DOM nodes like this. We use [[Compiling JSX|cs.webdev.frontend.language.js.jsframework.react.jsx.compiling-jsx]] to do the same.\n","n":0.113}}},{"i":214,"$":{"0":{"v":"createElement vs Returning Elements","n":0.5},"1":{"v":"\nTake a look at the following code example:\n\n```jsx\nfunction message({children}) {\n    return <div className='message'>{children}</div>\n}\n\nconst helloElement = React.createElement('div', {children: 'Hello World'})\n\nconst element = (\n    <div className='container'>\n        {helloElement}\n        {message({children: 'Goodbye World})}\n    </div>\n)\n\nReactDOM.render(element, document.getElementById('root'))\n```\n\nWhen we take a look at the component tree in the React Devtools, we can see the following:\n![createElement vs Returning Elements](/assets/images/2022-06-18-23-30-45.png)\n\nWe can see that a new React Element is created when we call `React.createElement` but the same doesn't happen when we directly return a component as done in `message` function. So there's some difference on how React manages elements created via `React.createElement` as compared to calling a function that returns an element.\n","n":0.1}}},{"i":215,"$":{"0":{"v":"Children","n":1},"1":{"v":"\nSome ways to specify the children:\n\n```jsx\nReact.createElement('div', {\n    className: 'container',\n    children: 'Hello World'\n})\n```\n\n```jsx\nReact.createElement('div', {\n    className: 'container',\n    children: ['Hello World', 'Goodbye World']\n})\n```\n\n```jsx\nReact.createElement('div', {\n    className: 'container',\n}, 'Hello World', 'Goodbye World')\n```\n\n- Putting React elements as `children`:\n\n```jsx\nReact.createElement('div', {\n    className: 'container',\n    children: React.createElement('span', null, 'Hello', 'World')\n})\n```\n\nThis will look like:\n\n```html\n<div class='container'>\n    <span>HelloWorld</span>\n</div>\n```\n","n":0.149}}},{"i":216,"$":{"0":{"v":"Components","n":1},"1":{"v":"\nIn React we create components. Components are basically functions that returns something that's rendereable e.g. more React elements, strings, `null`, numbers etc. They're self-contained pieces of UI that only re-render when their props change.\n\nWe can think of the components or in general UI as a function of the state and props.\n\nYou can use `div`, `span` etc. HTML tags to create components or create a custom component that contains a bunch of other React elements composed together to form a single component that can be reused anywhere.\n\nAll custom React components must start with an uppercase letter for React to be able to recognize it as a custom component.\n\n```jsx\n    const Message = ({children}) => {\n      return <div class=\"message\">\n        {children}\n      </div>\n    }\n\n    const element = (\n      <div className=\"container\">\n        <Message>Hello World</Message>\n        <Message>Goodbye World</Message>\n      </div>\n    )\n\n    ReactDOM.createRoot(document.getElementById('root')).render(element)\n```\n\nWhen creating components, we need to make sure a component returns only one element. We might have multiple components nested inside that element but effectively a component can only return one and only one element.\n","n":0.078}}},{"i":217,"$":{"0":{"v":"Types","n":1}}},{"i":218,"$":{"0":{"v":"Functional","n":1}}},{"i":219,"$":{"0":{"v":"TS","n":1},"1":{"v":"\nFor functional component types for [[cs.webdev.frontend.language.js.tools.typescript]], we can use `React.FC`.\n","n":0.316}}},{"i":220,"$":{"0":{"v":"Hooks","n":1}}},{"i":221,"$":{"0":{"v":"Why Hooks","n":0.707},"1":{"v":"\n## What makes React so hard?\n\n- Pure JavaScript  are hard to reason about.\n- Lifecycle methods are confusing.\n- Logic Reuse is hard.\n\nAfter the introduction to hooks, everything is just converted to functions that are easy to extract and reuse.\n","n":0.162}}},{"i":222,"$":{"0":{"v":"Logic Reuse","n":0.707},"1":{"v":"\nEarlier we used to share logic via mixins. Then we used to share logic via Higher Order Components. Then we moved onto Render Props.\n\n```javascript\nimport React from 'react'\nimport UserContext from '../user-context'\n\nfunction ChatFeed({feedId}) {\n  return (\n    <UserContext.Consumer>\n      {user => (\n        <SubscribeToFeed feedId={feedId}>\n          {posts => (\n            <>\n              <DocumentTitle title={posts.length} />\n              // Pyramid of Doom\n              // Pseudo-Hierarchy\n              <OnlineStatus>\n                {isOnline => (\n                  <GeoLocation>\n                    {location => (\n                      <>\n                        <StickyScroller>\n                          <Posts posts={posts} />\n                        </StickyScroller>\n                        <PostInput feedId={feedId} user={user} />\n                      </>\n                    )}\n                  </GeoLocation>\n                )}\n              </OnlineStatus>\n            </>\n          )}\n        </SubscribeToFeed>\n      )}\n    </UserContext.Consumer>\n  )\n}\n```\n","n":0.11}}},{"i":223,"$":{"0":{"v":"Lifecycle","n":1},"1":{"v":"\nTake a look at the below code:\n\n```jsx\nimport React from 'react';\nimport UserContext from '../user-context';\n\nclass ChatFeed extends React.Component {\n    static contextType = UserContext;\n    state = {isScrolledToBottom: true};\n    \n    componentDidMount() {\n        this.subscribetoFeed();\n        this.setDocumentTitle();\n        this.subscribeToOnlineStatus();\n        this.subscribeToGeoLocation();\n    }\n    \n    componentWillUnmount() {\n        this.unsubscribetoFeed();\n        this.restoreDocumentTitle();\n        this.unsubscribeToOnlineStatus();\n        this.unsubscribeToGeoLocation();\n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        // ... compare props and re-subsribe etc. \n    }\n    \n    render() {\n        //...\n    }\n}\n```\n\nThis code is not optimal and prone to bugs. This would be difficult to refactor as well. Sharing logic is difficult as well.\n","n":0.111}}},{"i":224,"$":{"0":{"v":"JavaScript","n":1},"1":{"v":"\nCheck this bug:\n\n```jsx\nclass Counter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {count: this.props.initialCount};\n    }\n\n    increment() {\n        // BUG: this.setState is undefined as the this here doesn't point to the component instance\n        this.setState(({count}) => ({count: count + 1}));\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.increment}>+</button>\n                <div>{this.state.count}</div>\n            </div>\n        );\n    }\n}\n```\n\nFix: bind `this` to the component instance in the constructor.\n\n```jsx\nclass Counter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {count: this.props.initialCount};\n        // If you have a lot of handlers, you need to bind them all\n        this.increment = this.increment.bind(this);\n    }\n\n    increment() {\n        \n        this.setState(({count}) => ({count: count + 1}));\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.increment}>+</button>\n                <div>{this.state.count}</div>\n            </div>\n        );\n    }\n}\n```\n\nor use arrow functions\n\n```jsx\nclass Counter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {count: this.props.initialCount};\n    }\n\n    // This is called a class field\n    increment = () => {\n        this.setState(({count}) => ({count: count + 1}));\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.increment}>+</button>\n                <div>{this.state.count}</div>\n            </div>\n        );\n    }\n}\n```\n\nThis would be syntactic sugar for:\n\n```jsx\nclass Counter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {count: this.props.initialCount};\n        // This is called a class field\n        this.increment = () => {\n            this.setState(({count}) => ({count: count + 1}));\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.increment}>+</button>\n                <div>{this.state.count}</div>\n            </div>\n        );\n    }\n}\n```\n\nAlso,\n\n```jsx\n    constructor(props) {\n        super();\n        // This will fail as this.props doesn't exist yet as super is the one assigning props\n        this.state = {count: this.props.initialCount};\n    }\n```\n\nThis implies, you can move both state and handlers outside of the constructor by using class fields feature in ES6.\n\nThese are some of the stuff that we need to learn in JavaScript before learning about React.\n","n":0.062}}},{"i":225,"$":{"0":{"v":"useState","n":1},"1":{"v":"\nThis is how we use the `useState` hook:\n\n```jsx\nconst [state, setState] = useState(initialState);\n```\n\nThis returns a stateful value and a function to update it.\n\nDuring the initial render, the returned state is the same as the value passed as the first argument i.e. `initialState`.\n\nThe `setState` function is used to update the state. It accepts a new state value and enqueues a re-render of the component.\n\n```jsx\nsetState(newState);\n```\n\nDuring subsequent re-renders, the first value returned by useState will always be the most recent state after applying updates.\n\n**Note**: React guarantees that `setState` function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the `useEffect` or `useCallback` dependency list.\n","n":0.097}}},{"i":226,"$":{"0":{"v":"TS","n":1},"1":{"v":"\n```tsx\nconst [editTodo, setEditTodo] = useState<string>(todo.todo);\n```\n","n":0.447}}},{"i":227,"$":{"0":{"v":"useRef","n":1},"1":{"v":"\nThis is how you use a `useRef` hook:\n\n```jsx\nfunction TextInputWithFocusButton() {\n  const inputEl = useRef(null);\n  const onButtonClick = () => {\n    // `current` points to the mounted text input element\n    inputEl.current.focus();\n  };\n  return (\n    <>\n      <input ref={inputEl} type=\"text\" />\n      <button onClick={onButtonClick}>Focus the input</button>\n    </>\n  );\n}\n```\n\n`useRef` returns a mutable `ref` object whose `.current` property is initialized to the passed argument (`initialValue`). The returned object will persist for the full lifetime of the component. It gets pesisted across multiple renders of the component.\n","n":0.112}}},{"i":228,"$":{"0":{"v":"TS","n":1},"1":{"v":"\n```tsx\nconst inputRef = useRef<Type-of-element-in-the-ref>(null);\n```\n\nYou can specify the type of element in the `useRef` hook, e.g. for `input` elements, use `HTMLInputElement`.\n","n":0.224}}},{"i":229,"$":{"0":{"v":"Class","n":1}}},{"i":230,"$":{"0":{"v":"TS","n":1},"1":{"v":"\nTo support any kind of component in [[cs.webdev.frontend.language.js.tools.typescript]], we can use `React.ReactNode` which encompasses any kind of component e.g. `boolean`, `React.ReactChild`, `React.ReactFragment`, `React.ReactPortal`, `null`, `undefined`.\n","n":0.2}}},{"i":231,"$":{"0":{"v":"Spreading Props","n":0.707},"1":{"v":"\nWhile spreading `props` make sure to check how to put your properties, because in the event of conflict, the property that comes later is the one that overrides the others.\n\n```jsx\nconst Box = ({style, size='', ...otherProps}) => {\n  const boxSizeClassName = size ? `box--${size}` : ''\n  return <div className={`box ${boxSizeClassName}`} style={{fontStyle: 'italic', ...style}} {...otherProps}/>\n}\n```\n\nYou can access the rest of the `props` by using the `otherProps` property.\n","n":0.124}}},{"i":232,"$":{"0":{"v":"React Fragments","n":0.707},"1":{"v":"\nFragments are used in React to group a list of children elements without adding extra nodes to the DOM. It's a special kind of component from React which allows you to position two elements side-by-side rather than just nested.\n\nCan be used either as `<React.Fragment></React.Fragment>` or as `<></>`.\n","n":0.146}}},{"i":233,"$":{"0":{"v":"PropTypes","n":1},"1":{"v":"\n`PropTypes` are used to run validation on the `prop` being received by a component. It is used to validate the data type as well as if a particular `prop` is mandatory.\n\nHowever, `PropTypes` add some runtime overhead resulting in suboptimal performance and hence, they don't run in a production environment.\n\nThese days however, people also prefer using [[TypeScript|cs.webdev.frontend.language.js.tools.typescript]] for `prop` validation instead of `PropTypes`.\n\nAdding `PropTypes` to functional components:\n\n```jsx\nimport PropTypes from 'prop-types'\n\nfunction HelloWorldComponent({ name }) {\n  return (\n    <div>Hello, {name}</div>\n  )\n}\n\nHelloWorldComponent.propTypes = {\n  name: PropTypes.string\n}\n\nexport default HelloWorldComponent\n```\n\n**References:**\n[TypeChecking with PropTypes](https://reactjs.org/docs/typechecking-with-proptypes.html)\n","n":0.108}}},{"i":234,"$":{"0":{"v":"TS","n":1},"1":{"v":"\n```tsx\ninterface Props {\n    todo: Todo;\n    todos: Todo[];\n    setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\n}\n\nconst TodoCard: React.FC<Props> = ({todo, todos, setTodos}) => {\n    ...\n}\n```\n","n":0.236}}},{"i":235,"$":{"0":{"v":"Default Props","n":0.707},"1":{"v":"\nYou can also define default values for your `props` by assigning to the special `defaultProps` property:\n\n```jsx\n// Specifies the default values for props:\nGreeting.defaultProps = {\n  name: 'Stranger'\n};\n```\n\nIf you are using a Babel transform like `plugin-proposal-class-properties` (previously `plugin-transform-class-properties`), you can also declare defaultProps as static property within a React component class. This syntax has not yet been finalized though and will require a compilation step to work within a browser.\n\n```jsx\nclass Greeting extends React.Component {\n  static defaultProps = {\n    name: 'stranger'\n  }\n\n  render() {\n    return (\n      <div>Hello, {this.props.name}</div>\n    )\n  }\n}\n```\n\nThe `defaultProps` will be used to ensure that `this.props.name` will have a value if it was not specified by the parent component. The [[PropTypes|cs.webdev.frontend.language.js.jsframework.react.components.prop-types]] typechecking happens after `defaultProps` are resolved, so typechecking will also apply to the `defaultProps`.\n","n":0.09}}},{"i":236,"$":{"0":{"v":"DOM","n":1}}},{"i":237,"$":{"0":{"v":"DOM Node Creation","n":0.577},"1":{"v":"\nIn order to create a UI using JavaScript, we need to do the following:\n\n```html\n<body>\n    <div id=\"root\"></div>\n        <script type=\"text/javascript\">\n        const rootElement = document.getElementById('root')\n        const element = document.createElement('div')\n        element.textContent = 'Hello World'\n        element.className = 'container'\n        rootElement.appendChild(element)\n    </script>\n</body>\n```\n","n":0.169}}},{"i":238,"$":{"0":{"v":"CSSStyleDeclaration","n":1},"1":{"v":"\nThe `CSSStyleDeclaration` interface represents an object that is a CSS declaration block, and exposes style information and various style-related methods and properties.\n\nA `CSSStyleDeclaration` object can be exposed using three different APIs:\n\n- Via `HTMLElement.style`, which deals with the inline styles of a single element (e.g., `<div style=\"...\">`).\n- Via the `CSSStyleSheet API`. For example, `document.styleSheets[0].cssRules[0].style` returns a `CSSStyleDeclaration` object on the first CSS rule in the document's first stylesheet.\n- Via `Window.getComputedStyle()`, which exposes the `CSSStyleDeclaration` object as a read-only interface.\n","n":0.113}}},{"i":239,"$":{"0":{"v":"HTML","n":1},"1":{"v":"\nHTML defines the structure and describes the content of a website.\n\nHTML = HyperText Markup Language\n","n":0.258}}},{"i":240,"$":{"0":{"v":"Tags","n":1},"1":{"v":"\nTags are fundametal building blocks of HTML that define the structure of the webpage and how the content should appear.\n\nExample: `<p></p>`\n\nAlmost all the tags need a closing tag unless it's a self closing tag.\n\nThe tags need to follow a hierarchy:\n\n```html\n<div>\n    <p>Hello World</p>\n</div>\n```\n","n":0.154}}},{"i":241,"$":{"0":{"v":"Types","n":1}}},{"i":242,"$":{"0":{"v":"Self Closing","n":0.707},"1":{"v":"\n```html\n<img src='image-url' alt='alternate-text'/>\n```\n","n":0.577}}},{"i":243,"$":{"0":{"v":"Normal","n":1},"1":{"v":"\n```html\n<p>Hello World</p>\n```\n\nOpening Tag: `<p>`\nClosing Tag: `</p>`\n","n":0.408}}},{"i":244,"$":{"0":{"v":"Why Tags?","n":0.707},"1":{"v":"\nWith the power of CSS, we can convert any element to look like any other element. e.g. we can create `div`'s from a `button` or a `button` from a `div`. Also, we have multiple header elements like `h1`, `h2` etc. however, any header can be made to look like any other header with CSS. As a matter of fact, we can convert the entire HTML document to just consist of `div`'s and change the styling to visually make them look like the other elements.\n\nVisually we can see all the different elements and understand what it is, however, it's necessary for our code to understand that too. HTML by nature was meant to define a Semantic structure of the webpage which is used for accessibility purposes. When we use different tags, screen readers and other accessibility readers which might be used by a disabled person, will give them a better User Experience in navigating through the website e.g. `h1` will them what the website is and different headings will tell them what's important in decreasing level of importance. Similarly, `button` will them that there's a button there which can be clicked, etc.\n","n":0.072}}},{"i":245,"$":{"0":{"v":"Video","n":1},"1":{"v":"\n```html\n<video control>\n    <source src='<rwa-video-source-url>' />\n</video>\n```\n\n`control` or `control='true'` makes sure your video has playback controls.\n\n`<source>` is used to specify the source of the video but we need to make sure it's a raw video source url.\n","n":0.169}}},{"i":246,"$":{"0":{"v":"Youtube Videos","n":0.707},"1":{"v":"\n```html\n<iframe width=\"1264\" height=\"480\" src=\"https://www.youtube.com/embed/2Om3kaMCNrQ\" title=\"HOW DOES THIS DECK KEEP WINNING? - Legends of Runeterra\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n```\n\nIn case of Youtube videos, usually they don't give the source to the raw url but an embed link like above. This is because they want to keep the rights and branding of the video. Later, when we use that embed link, it will as if we are advertising YouTube.\n","n":0.119}}},{"i":247,"$":{"0":{"v":"Table","n":1},"1":{"v":"\nThis is used to represent tabular data:\n\n```html\n<table>\n    <!-- Table Heading -->\n    <thead>\n        <!-- Table Row -->\n        <tr>\n            <!-- Table Header -->\n            <th>Col 1</th>\n            <th>Col 2</th>\n            <th>Col 3</th>\n        </tr>\n    </thead>\n    <!-- Table Body -->\n    <tbody>\n        <tr>\n            <!-- Table Data -->\n            <td>col 1 data</td>\n            <td>col 2 data</td>\n            <td>col 3 data</td>\n        </tr>\n        <tr>\n            <td>col 1 data</td>\n            <td>col 2 data</td>\n            <td>col 3 data</td>\n        </tr>\n        <tr>\n            <td>col 1 data</td>\n            <td>col 2 data</td>\n            <td>col 3 data</td>\n        </tr>\n    </tbody>\n</thead>\n```\n\n`colspan` can be used to specify how much space a column should take.\n`rowspan` can be used to specify how much space a row should take.\n\nEarlier, tables were used to create layouts. However, it's notoriously difficult to make that layout responsive. Hence, it's always best to use tables specifically for representing tabular data and handle responsiveness with CSS.\n","n":0.088}}},{"i":248,"$":{"0":{"v":"Image Tags","n":0.707},"1":{"v":"\nIt's a self closing tag and an inline element to put images into it. You can specify the width and height of an image directly into the HTML tag but it's not a good standard to do it that way. It's better to use CSS for this purpose.\n\n```html\n<img src='<some-img-url>' alt=\"<some-alternate-text-to-display-if-image-can't-be-loaded>\"/>\n```\n\n1. `src`: Source of the image\n2. `alt`: Alternate text in case the image can't be rendered and specifically helpful for accessibility readers. It also enables good SEO as search engines know what this image is all about.\n","n":0.108}}},{"i":249,"$":{"0":{"v":"Headers","n":1},"1":{"v":"\nThe `<h1>` to `<h6>` elements are used as heading elements to signify the importance of the content below them. The lower the number, the higher the significance.\n","n":0.192}}},{"i":250,"$":{"0":{"v":"Forms","n":1},"1":{"v":"\n```html\n<form method='GET' action='/register'>\n    <input type='text' name='user-name'/>\n    <input type='submit' />\n</form>\n```\n\nForm is used to submit data to the backend.\n\nThe `method` attribute defines what HTTP method it uses to talk with the backend.\n\n`action` is the url path the form tries to talk to. This is where the form sends it's data to.\n\n`submit` is used to submit the form. A button inside a form submits the form by default but we can be specifically set that button to submit the form by specifying, `type='submit'`.\n\n`name` is used as a query parameter.\n\ne.g. in this case, itwould be:\n\n`http://www.somewebsite.com/register?user-name=<value-entered-in-the-input-textbox>`\n\nIn forms, everything exists in a `name=value` pair. It's recommended to give those attributes to all the form elements that needs it.\n","n":0.094}}},{"i":251,"$":{"0":{"v":"Radio","n":1},"1":{"v":"\nRadio buttons are used where you'd want one answer out of a choice of multiple answers.\n\n```html\n<label>\n    <input type='radio' id='indoor' name='indoor-outdoor' value='indoor'>Indoor\n</label>\n<label>\n    <input type='radio' id='outdoor' name='indoor-outdoor' value='outdoor'>Outdoor\n</label>\n```\n\nTo make sure one option deselects automatically when we select the other option, we need to add the `name` attribute to the radio options with the same value.\n\nWhen we submit the form, if we don't add a `value` attribute, it will submit the form with values as `indoor-outdoor=on` which isn't very useful. Hence we need to add a `value` attribute with an appropriate value. e.g. in this case, we would have, `indoor-outdoor=indoor` or `indoor-outdoor=outdoor`.\n\n`checked` is used to check a Radio Button by default initially.\n","n":0.096}}},{"i":252,"$":{"0":{"v":"Fieldset and Legend","n":0.577},"1":{"v":"\nThis is a [[cs.webdev.frontend.language.html.element.block]] which is used group related set of fields together in a form.\n\n```html\n<fieldset>\n    <legend>Is your cat an indoor or outdoor cat?</legend>\n    <label><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"> Indoor</label>\n    <label><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label>\n</fieldset>̦\n```\n\n`legend` provides a caption to the elements inside the `fieldset` element. It gives more context to the user about what they should enter in that part of the form.\n","n":0.125}}},{"i":253,"$":{"0":{"v":"Checkbox","n":1},"1":{"v":"\nAllows you to select multiple options out of a set of options.\n\n```html\n<fieldset>\n  <legend>What's your cat's personality?</legend>\n  <input id=\"loving\" type=\"checkbox\" name=\"personality\" value='loving' checked> <label for=\"loving\">Loving</label>\n  <input id=\"lazy\" type=\"checkbox\" name=\"personality\"  value='lazy'> <label for=\"lazy\">Lazy</label>\n  <input id=\"energetic\" type=\"checkbox\" name=\"personality\"  value='energetic'> <label for=\"energetic\"> Energetic</label>\n</fieldset>\n```\n\n`checked` is used to check a Checkbox by default initially.\n","n":0.144}}},{"i":254,"$":{"0":{"v":"Figure","n":1},"1":{"v":"\n`<figure>` element represents self-contained content and allows you to associate an image with a caption.\n\nA figure caption or `<figcaption>` allows you to add a caption to an image contained within a `figure` element to describe the image.\n","n":0.164}}},{"i":255,"$":{"0":{"v":"Anchor Tag","n":0.707},"1":{"v":"\nUsed for links i.e. linking of one page to another page.\n\n```html\n<a href='www.google.com' target='_blank'>Google</a>\n```\n\n`href` is the attribute that's used to tell the anchor tag to which link to point to. The value can be put without quotes but in case the link contains spaces, it will break. Hence, it's recommended to put the link inside quotes.\n\n`target='_blank'` will make sure to open the linked page in a new tab.\n","n":0.122}}},{"i":256,"$":{"0":{"v":"Structure","n":1},"1":{"v":"\n```html\n<!DOCTYPE html>\n<!-- ^ Should be the top-most element in the HTML Document -->\n<!-- ^ Tells the browser that this is a HTML5 Document -->\n<!-- It's good to specify the language in which your webpage is in and in this case, it's English -->\n<html lang=\"en\">\n    <!-- Starting of your HTML document -->\n    <head>\n        <!-- Is not visible in the browser webpage -->\n        <!-- Contains all your metadata for search engines, your scripts, your stylesheets etc. -->\n        <!-- This is used to specify character set to the browser for it to understand the characters in the document e.g. emojis -->\n        <meta charset='utf8' />\n        <!-- For pages to look similar on mobile devices as well as desktop or laptop -->\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <!-- Title of the browser tab and also used for SEO -->\n        <title>My Awesome Website</title>\n    </head>\n    <body>\n        <!-- Actual content visible in the webpage -->\n        <h1>My Awesome Website</h1>\n    </body>\n</html>\n```\n","n":0.081}}},{"i":257,"$":{"0":{"v":"Semantic","n":1},"1":{"v":"\nSemantic tags are used to identify different content areas in the HTML5 document. These elements make the HTML5 document easier to read and help with SEO(Search Engine Optimization) and accessibility.\n","n":0.183}}},{"i":258,"$":{"0":{"v":"Italics Text","n":0.707},"1":{"v":"\nInitially, we used to use `<i></i>` tags to make some text in Italics. However it has been replaced with `<em></em>` as `<i>` didn't have any semantic meaning to it.\n","n":0.186}}},{"i":259,"$":{"0":{"v":"Bold Text","n":0.707},"1":{"v":"\nInitially, we used to use `<b></b>` tags to make some text bolder. However it has been replaced with `<strong></strong>` as `<b>` didn't have any semantic meaning to it.\n","n":0.189}}},{"i":260,"$":{"0":{"v":"Element","n":1},"1":{"v":"\nWe have various elements that make up a webpage like headers, paragraphs etc. These describe the different types of content.\n\n![Element](/assets/images/2022-07-07-10-56-28.png)\n\n**Headers:**\n\n```html\n    <h1>This is a header</h1>\n```\n\n**Paragraphs:**\n\n```html\n    <p>This is a header</p>\n```\n","n":0.189}}},{"i":261,"$":{"0":{"v":"Inline Elements","n":0.707},"1":{"v":"\nInline elements are those which only occupy the space bounded by the tags defining the element, instead of breaking the flow of the content.\n\n**Note:** An inline element does not start on a new line and only takes up as much width as necessary i.e. the width of the content.\n","n":0.143}}},{"i":262,"$":{"0":{"v":"Inline Block Elements","n":0.577},"1":{"v":"\nInline block elements take up the width of their content, however, we can specify a width to them.\n","n":0.236}}},{"i":263,"$":{"0":{"v":"Block Elements","n":0.707},"1":{"v":"\nA block level element, occupies the entire horizontal width of the parent element(container) and vertical space equal to the height of it's contents, thereby creating a 'block'.\n\nBrowsers typically display the block-level element with a newline both before and after the element. You can visualize them as a stack of boxes.\n\n**Note**: A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can) i.e. width of the parent.\n","n":0.11}}},{"i":264,"$":{"0":{"v":"Block Vs Inline Elements","n":0.5},"1":{"v":"\nThere are a couple of key differences between block-level elements and [[cs.webdev.frontend.language.html.element.inline]]:\n\n- **Content model**\nGenerally, block-level elements may contain inline elements and (sometimes) other block-level elements. Inherent in this structural distinction is the idea that block elements create \"larger\" structures than inline elements.\n\n- **Default formatting**\nBy default, block-level elements begin on new lines, but inline elements can start anywhere in a line.\n","n":0.129}}},{"i":265,"$":{"0":{"v":"Attributes","n":1},"1":{"v":"\nAttributes are pieces of data that we use to describe elements. e.g. Take the following element into consideration:\n\n```html\n<img src=\"laura-jones.jpg\" alt=\"Laura Jones\">\n```\n\nHere we have an `img` element and we have the following attributes:\n\n1. `src`: Source of the image\n2. `alt`: Alternate text in case the image can't be rendered and specifically helpful for accessibility readers. It also enables good SEO as search engines know what this image is all about.\n","n":0.121}}},{"i":266,"$":{"0":{"v":"Comments","n":1},"1":{"v":"\n```html\n<p>This is not a comment</p>\n<!-- This, however is a comment -->\n<!--\n    This is a multiline comment\n-->\n```\n","n":0.25}}},{"i":267,"$":{"0":{"v":"CSS","n":1},"1":{"v":"\nCSS adds styles to a web page e.g. colour, layouts, background, fonts etc.\n","n":0.277}}},{"i":268,"$":{"0":{"v":"Ways of Adding CSS","n":0.5}}},{"i":269,"$":{"0":{"v":"Internal Styles","n":0.707},"1":{"v":"\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset='utf8' />\n        <title>My Awesome Website</title>\n        <style>\n            /* Selects only h1 in the document */\n            h1 {\n                background: yellow;\n            }\n        </style>\n    </head>\n    <body>\n        <h1>My Awesome Website</h1>\n    </body>\n</html>\n```\n\nThe problem with this way is that it can only be used to provide styles for only one HTML document.\n","n":0.143}}},{"i":270,"$":{"0":{"v":"Inline","n":1},"1":{"v":"\n```html\n<h1 style='background: yellow;'>Hello World</h1>\n```\n\nStyles can only be given to a single element.\n","n":0.289}}},{"i":271,"$":{"0":{"v":"External CSS","n":0.707},"1":{"v":"\n```css\n/* Selects only h1 in the document */\nh1 {\n    background: yellow;\n}\n```\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset='utf8' />\n        <title>My Awesome Website</title>\n        <!-- rel defines the relationship with current HTML document -->\n        <link rel='stylesheet' href='<path-to-css>'/>\n    </head>\n    <body>\n        <h1>My Awesome Website</h1>\n    </body>\n</html>\n```\n\nCan be used in multiple HTML documents.\n","n":0.151}}},{"i":272,"$":{"0":{"v":"Responsiveness","n":1}}},{"i":273,"$":{"0":{"v":"Meta","n":1},"1":{"v":"\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n```\n\nFor pages to look similar on mobile devices as well as desktop or laptop, we need to add the above in the `<head>` tag.\n","n":0.189}}},{"i":274,"$":{"0":{"v":"Layout","n":1}}},{"i":275,"$":{"0":{"v":"Flexbox","n":1}}},{"i":276,"$":{"0":{"v":"Writing Mode","n":0.707},"1":{"v":"\nCSS Writing Modes is a CSS module that defines various international writing modes, such as left-to-right (e.g. used by Latin and Indic scripts), right-to-left (e.g. used by Hebrew or Arabic scripts), bidirectional (used when mixing left-to-right and right-to-left scripts) and vertical (e.g. used by some Asian scripts).\n","n":0.146}}},{"i":277,"$":{"0":{"v":"Selectors","n":1},"1":{"v":"\nSelectors are used to select a specific element in the HTML document to style it. Usually styles are given in the following format:\n\n```css\nselector {\n    property-name: property-value;\n}\n```\n\ne.g.\n\n```css\nh2 {\n    color: blue;\n}\n```\n","n":0.186}}},{"i":278,"$":{"0":{"v":"Same Styles for Multiple Elements","n":0.447},"1":{"v":"\n```css\n      h1, h2, p {\n        text-align: center;\n      }\n```\n\nWill add the same styles to `h1`, `h2` and `p` elements in this case.\n","n":0.218}}},{"i":279,"$":{"0":{"v":"Pseudo-Selectors","n":1},"1":{"v":"\nWhen a link has been actually visited:\n\n```css\na:visited {\n    propertyName: propertyValue;\n}\n```\n\nWhen the mouse hovers over a link:\n\n```css\na:hover { \n    propertyName: propertyValue; \n}\n```\n\nWhen the link is actually being clicked on:\n\n```css\na:active { \n    propertyName: propertyValue; \n}\n```\n","n":0.174}}},{"i":280,"$":{"0":{"v":"Id","n":1},"1":{"v":"\nThis can be used in the following manner:\n\n```html\n<style>\n    #top-header {\n        color: blue;\n    }\n</style>\n<h1 id='top-header'>Hello World</h1>\n```\n\nAlthough the browsers don't enforce it, but we should give every element a unique id if needed or we must use the ids at most for one element. With [[cs.webdev.frontend.language.html]] and CSS you can get away with putting the same id in two different elements. However, when [[cs.webdev.frontend.language.js]] comes into picture, it can become quite dicey. It's an agreed upon standard to use ids only once.\n\nAlso, if there are conflicting styles, ids are given more preference (specificity) over classes.\n\nAlso, using ids give some performance benefits as the HTML are stored as a hastable with the ids as keys which allows for quicker access to the element. However, it's not much important to consider.\n","n":0.089}}},{"i":281,"$":{"0":{"v":"Element","n":1},"1":{"v":"\n```css\nh2 {\n    color: blue;\n}\n```\n\nThis styles all the h2 elements in the document.\n","n":0.289}}},{"i":282,"$":{"0":{"v":"Class","n":1},"1":{"v":"\n```html\n<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n</main>\n```\n\nClasses can be given to specific elements by using the `class` attribute of an HTML. You can give the same class to multiple HTML elements if they need to share the style.\n\nTo specify classes in CSS, you need to use it like: `.className`.\n","n":0.131}}},{"i":283,"$":{"0":{"v":"Child Selector","n":0.707},"1":{"v":"\n```css\n.item p {\n\n}\n```\n\nSelects all nested `p` elements inside the element with a class name of `item`.\n","n":0.25}}},{"i":284,"$":{"0":{"v":"Flow Layout","n":0.707},"1":{"v":"\nNormal Flow, or Flow Layout, is the way that [[cs.webdev.frontend.language.html.element.block]] and [[cs.webdev.frontend.language.html.element.inline]] are displayed on a page before any changes are made to their layout. The flow is essentially a set of things that are all working together and know about each other in your layout. Once something is taken out of flow it works independently.\n\nIn normal flow, inline elements display in the inline direction, that is in the direction words are displayed in a sentence according to the [[cs.webdev.frontend.language.css.writing-mode]] of the document.\n\nBlock elements display one after the other, as paragraphs do in the Writing Mode of that document. In English therefore, inline elements display one after the other, starting on the left, and block elements start at the top and move down the page.\n","n":0.089}}},{"i":285,"$":{"0":{"v":"Colour Theory","n":0.707},"1":{"v":"\nThere are basically two types of color models:\n\n1. Additive RGB (Red, Green, Blue) model used in electronic devices.\n2. Subtractive CMYK (Cyan, Magenta, Yellow, Black) model used in print.\n\nMostly when it comes to building websites, we use the RGB model.\n","n":0.16}}},{"i":286,"$":{"0":{"v":"RGB","n":1},"1":{"v":"\nThis is an additive color model that we use in CSS. Here, the colour begins as black and change as different levels of red, green and blue are introduced.\n\nAn easy way to do this is with the CSS `rgb` function.\n\n```css\n.box {\n    background-color: rgb(red, green, blue);\n}\n```\n\nHere, each one of the argument corresponds to a specific color in the RGB model. The first one is for red, second one for gree and last one for blue. To add any amount of red, green or blue, we increase the number of the corresponding argument.\n\nHere, 0 is the lowest which would mean there's no corresponding RGB component available i.e. 0% and 255 is the highest number, signifying the highest amount of that particular colour available i.e. 100%.\n\nWe can also denote the colour as Hex values with a `#`. Hexadecimal, or base 16 values, go from 0 - 9, then A - F:\n\n0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\n\nWith hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0).\n\n```css\n.green {\n  background-color: #007F00;\n}\n```\n","n":0.071}}},{"i":287,"$":{"0":{"v":"Tertiary","n":1},"1":{"v":"\nTertiary colors are created by combining a primary with a nearby secondary color.\n\n```css\n.one {\n  background-color: rgb(255, 127, 0);\n}\n.two {\n  background-color: rgb(255, 0, 127);\n}\n.three {\n  background-color: rgb(0, 255, 127);\n}\n.four {\n  background-color: rgb(127, 255, 0);\n}\n.five {\n  background-color: rgb(0, 127, 255);\n}\n.six {\n  background-color: rgb(127, 0, 255);\n}\n```\n","n":0.152}}},{"i":288,"$":{"0":{"v":"Secondary","n":1},"1":{"v":"\nSecondary colors are the colors you get when you combine primary colors.\n\n```css\n.one {\n  background-color: rgb(255, 255, 0);\n}\n.two {\n  background-color: rgb(255, 0, 255);\n}\n.three {\n  background-color: rgb(0, 255, 255);\n}\n```\n","n":0.192}}},{"i":289,"$":{"0":{"v":"Primary Colours","n":0.707},"1":{"v":"\nThese are the colours in RGB colour model, that when combined, create pure white. But for this, each colour needs to be at it's highest intensity.\n\n```css\n.box {\n    background-color: rgb(255, 255, 255);\n}\n```\n\nThe resultant colour is black when each colour is at it's lowest intensity.\n\n```css\n.box {\n    background-color: rgb(0, 0, 0);\n}\n```\n\nThe following are the primary colours:\n\n```css\n.one {\n  background-color: rgb(255, 0, 0);\n}\n.two {\n  background-color: rgb(0, 255, 0);\n}\n.three {\n  background-color: rgb(0, 0, 255);\n}\n```\n","n":0.121}}},{"i":290,"$":{"0":{"v":"Hsl","n":1},"1":{"v":"\nThe HSL color model, or hue, saturation, and lightness, is another way to represent colors.\n\nThe CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.\n\nIf you imagine the [[cs.webdev.frontend.language.css.colour-theory.colour-wheel]], the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.\n\nSaturation is the intensity of a color from 0%, or gray, to 100% for pure color.\n\nLightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral.\n","n":0.099}}},{"i":291,"$":{"0":{"v":"Colour Wheel","n":0.707},"1":{"v":"\nA color wheel is a circle where similar colors, or hues, are near each other, and different ones are further apart. For example, pure red is between the hues rose and orange.\n\n![Colour Wheel](/assets/images/2022-08-03-18-52-47.png)\n\nTwo colors that are opposite from each other on the color wheel are called complementary colors. If two complementary colors are combined, they produce gray. But when they are placed side-by-side, these colors produce strong visual contrast and appear brighter.\n\nThis contrast can be distracting if it's overused on a website, and can make text hard to read if it's placed on a complementary-colored background.\n\nIt's better practice to choose one color as the dominant color, and use its complementary color as an accent to bring attention to certain content on the page.\n\n```css\n.blue {\n  background-color: hsl(240, 100%, 50%);\n}\n```\n","n":0.088}}},{"i":292,"$":{"0":{"v":"Centering","n":1}}},{"i":293,"$":{"0":{"v":"Center h1 p etc","n":0.5},"1":{"v":"\n```css\nh1 {\n    text-align: center;\n}\n```\n","n":0.5}}},{"i":294,"$":{"0":{"v":"Center div Horizontally","n":0.577},"1":{"v":"\nTo do this, we can add `margin-left` and `margin-right` properties to `auto`.\n\n```css\ndiv {\n    margin-left: auto;\n    margin-right: auto;\n}\n```\n\nor\n\n```css\ndiv {\n    margin: 0 auto;\n}\n```\n","n":0.218}}},{"i":295,"$":{"0":{"v":"Devops","n":1},"1":{"v":"\nAWS defines DevOps as:\n\n```text\n A combination of cultural philisophies, practices and tools that increases an organization's ability to deliver applications and services at high velocity.\n```\n","n":0.2}}},{"i":296,"$":{"0":{"v":"Network","n":1},"1":{"v":"\nA network is officially defined as a group or system of interconnected people or items.\n\nTrains stations connected to each other through railway tracks form the railway network.\n\nPeople who follow each other on Twitter make up an online social network.\n\nComputers connected to each other with cable or wireless radio make up a computer network.\n\nTwo main purposes of computer networks:\n\n1. Communication using computers\n2. Sharing of resources.\n\nAn “internet” allows doing these two things across different computer networks.\n\nThe Internet is essentially a network of computer networks.\n","n":0.11}}},{"i":297,"$":{"0":{"v":"HTTP","n":1}}},{"i":298,"$":{"0":{"v":"DNS","n":1}}},{"i":299,"$":{"0":{"v":"Computers","n":1},"1":{"v":"\nA computer is an electronic device used to manipulate information or data. It can read, store and process data. A computer can only understand 0's and 1's, but it use them in a combination process documents, photos, music, videos, create games etc.\n\nIt consists of two parts:\n\n1. Hardware: Any part of the computer that has a physical structure e.g. CPU, monitors, keyboards etc.\n2. Software: A set of instructions that tells the hardware what to do and how to do it.\n","n":0.113}}},{"i":300,"$":{"0":{"v":"Types","n":1},"1":{"v":"\nWe have:\n\n1. Personal computers: Desktop, laptops etc.\n2. Smart phones\n3. Smartwatches and wearables\n4. Game consoles\n5. TV\n6. Tablet computers\n7. Servers\n","n":0.236}}}]}
